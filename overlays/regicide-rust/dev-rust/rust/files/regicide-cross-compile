#!/bin/bash

# RegicideOS Cross-Compilation Helper
# Makes it easy to cross-compile Rust projects for various embedded and AI targets

set -e

SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
TOOLCHAIN_CONFIG="$SCRIPT_DIR/toolchain.toml"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Supported targets
declare -A TARGETS=(
    # ARM Cortex-M
    ["thumbv6m-none-eabi"]="Cortex-M0, M0+"
    ["thumbv7m-none-eabi"]="Cortex-M3"
    ["thumbv7em-none-eabi"]="Cortex-M4, M7 (no FPU)"
    ["thumbv7em-none-eabihf"]="Cortex-M4F, M7F (with FPU)"
    ["thumbv8m.base-none-eabi"]="Cortex-M23"
    ["thumbv8m.main-none-eabi"]="Cortex-M33, M35P"

    # RISC-V
    ["riscv32i-unknown-none-elf"]="RV32I base"
    ["riscv32imc-unknown-none-elf"]="RV32IMC (compressed)"
    ["riscv32imac-unknown-none-elf"]="RV32IMAC (atomic)"
    ["riscv64gc-unknown-none-elf"]="RV64GC full"

    # Linux cross-compilation
    ["aarch64-unknown-linux-gnu"]="ARM64 Linux"
    ["arm-unknown-linux-gnueabihf"]="ARMv7 Linux"
    ["riscv64gc-unknown-linux-gnu"]="RISC-V Linux"

    # WebAssembly
    ["wasm32-unknown-unknown"]="Pure WebAssembly"
    ["wasm32-wasi"]="WASI (WebAssembly System Interface)"

    # Windows
    ["x86_64-pc-windows-gnu"]="Windows 64-bit"
)

show_help() {
    echo -e "${BLUE}RegicideOS Cross-Compilation Helper${NC}"
    echo
    echo "Usage: $SCRIPT_NAME [OPTIONS] --target TARGET [CARGO_ARGS...]"
    echo
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -l, --list-targets      List available targets"
    echo "  -t, --target TARGET     Target to compile for (required)"
    echo "  -r, --release           Build in release mode"
    echo "  -v, --verbose           Verbose output"
    echo "  --                      Pass remaining arguments to cargo"
    echo
    echo "Supported Targets:"
    echo
    for target in "${!TARGETS[@]}"; do
        echo -e "  ${GREEN}$target${NC} - ${TARGETS[$target]}"
    done
    echo
    echo "Examples:"
    echo "  $SCRIPT_NAME --target thumbv7em-none-eabihf"
    echo "  $SCRIPT_NAME --target riscv64gc-unknown-linux-gnu --release"
    echo "  $SCRIPT_NAME --target wasm32-wasi -- --no-default-features"
    echo
    echo "Environment Variables:"
    echo "  CARGO_BUILD_JOBS       Number of parallel jobs"
    echo "  RUSTFLAGS              Additional Rust flags"
    echo "  TARGET_CFLAGS          C flags for target"
    echo "  TARGET_CXXFLAGS        C++ flags for target"
    echo "  TARGET_LDFLAGS          Linker flags for target"
}

list_targets() {
    echo -e "${BLUE}Available Cross-Compilation Targets:${NC}"
    echo
    printf "%-35s %s\n" "Target" "Description"
    echo "---------------------------------------------------"
    for target in "${!TARGETS[@]}"; do
        printf "${GREEN}%-35s${NC} %s\n" "$target" "${TARGETS[$target]}"
    done
}

validate_target() {
    local target="$1"
    if [[ -z "${TARGETS[$target]}" ]]; then
        echo -e "${RED}Error: Unsupported target '$target'${NC}" >&2
        echo -e "${YELLOW}Use --list-targets to see available targets${NC}" >&2
        return 1
    fi
    return 0
}

check_dependencies() {
    local target="$1"

    # Check if rust is installed
    if ! command -v rustc &> /dev/null; then
        echo -e "${RED}Error: Rust is not installed${NC}" >&2
        echo "Please install Rust first: emerge dev-lang/rust" >&2
        return 1
    fi

    # Check if target is installed
    if ! rustc --print target-list | grep -q "^$target\$"; then
        echo -e "${YELLOW}Warning: Target '$target' not found in default Rust installation${NC}" >&2
        echo "You may need to install it with: rustup target add $target" >&2
    fi

    # Check for cross-compilation toolchain
    case "$target" in
        aarch64-unknown-linux-gnu)
            if ! command -v aarch64-linux-gnu-gcc &> /dev/null; then
                echo -e "${YELLOW}Warning: aarch64-linux-gnu-gcc not found${NC}" >&2
                echo "Install with: emerge cross-aarch64-linux-gnu/gcc" >&2
            fi
            ;;
        arm-unknown-linux-gnueabihf)
            if ! command -v arm-linux-gnueabihf-gcc &> /dev/null; then
                echo -e "${YELLOW}Warning: arm-linux-gnueabihf-gcc not found${NC}" >&2
                echo "Install with: emerge cross-arm-linux-gnueabihf/gcc" >&2
            fi
            ;;
        riscv64gc-unknown-linux-gnu)
            if ! command -v riscv64-linux-gnu-gcc &> /dev/null; then
                echo -e "${YELLOW}Warning: riscv64-linux-gnu-gcc not found${NC}" >&2
                echo "Install with: emerge cross-riscv64-linux-gnu/gcc" >&2
            fi
            ;;
        thumbv*|riscv32*)
            if ! command -v arm-none-eabi-gcc &> /dev/null; then
                echo -e "${YELLOW}Warning: arm-none-eabi-gcc not found${NC}" >&2
                echo "Install with: emerge cross-arm-none-eabi/gcc" >&2
            fi
            ;;
    esac
}

build_target() {
    local target="$1"
    shift
    local cargo_args=("$@")

    echo -e "${BLUE}Building for target: ${GREEN}$target${NC}"
    echo -e "${BLUE}Description: ${YELLOW}${TARGETS[$target]}${NC}"
    echo

    # Set up environment variables for cross-compilation
    case "$target" in
        aarch64-unknown-linux-gnu)
            export CC="aarch64-linux-gnu-gcc"
            export CXX="aarch64-linux-gnu-g++"
            export AR="aarch64-linux-gnu-ar"
            export TARGET_CFLAGS="-O2 -march=generic"
            export TARGET_CXXFLAGS="-O2 -march=generic"
            export TARGET_LDFLAGS=""
            ;;
        arm-unknown-linux-gnueabihf)
            export CC="arm-linux-gnueabihf-gcc"
            export CXX="arm-linux-gnueabihf-g++"
            export AR="arm-linux-gnueabihf-ar"
            export TARGET_CFLAGS="-O2 -march=armv7-a -mfpu=neon -mfloat-abi=hard"
            export TARGET_CXXFLAGS="-O2 -march=armv7-a -mfpu=neon -mfloat-abi=hard"
            export TARGET_LDFLAGS=""
            ;;
        riscv64gc-unknown-linux-gnu)
            export CC="riscv64-linux-gnu-gcc"
            export CXX="riscv64-linux-gnu-g++"
            export AR="riscv64-linux-gnu-ar"
            export TARGET_CFLAGS="-O2 -march=rv64gc"
            export TARGET_CXXFLAGS="-O2 -march=rv64gc"
            export TARGET_LDFLAGS=""
            ;;
        thumbv*|riscv32*)
            export CC="arm-none-eabi-gcc"
            export CXX="arm-none-eabi-g++"
            export AR="arm-none-eabi-ar"
            export TARGET_CFLAGS="-O2 -ffunction-sections -fdata-sections"
            export TARGET_CXXFLAGS="-O2 -ffunction-sections -fdata-sections"
            export TARGET_LDFLAGS="-Wl,--gc-sections"
            ;;
        wasm32-*)
            # WebAssembly doesn't need special toolchain
            ;;
    esac

    # Set Rust flags for cross-compilation
    local rust_flags=""
    if [[ -n "$TARGET_CFLAGS" ]]; then
        rust_flags="-C link-arg=$TARGET_CFLAGS"
    fi
    if [[ -n "$TARGET_LDFLAGS" ]]; then
        rust_flags="$rust_flags -C link-arg=$TARGET_LDFLAGS"
    fi

    if [[ -n "$rust_flags" ]]; then
        export RUSTFLAGS="$RUSTFLAGS $rust_flags"
    fi

    echo -e "${BLUE}Environment variables:${NC}"
    echo "  CC=${CC:-default}"
    echo "  CXX=${CXX:-default}"
    echo "  AR=${AR:-default}"
    echo "  RUSTFLAGS=${RUSTFLAGS:-default}"
    echo

    # Run cargo
    if [[ "${cargo_args[@]}" == *"release"* ]]; then
        echo -e "${BLUE}Running: cargo build --target $target --release${NC}"
        cargo build --target "$target" --release "${cargo_args[@]}"
    else
        echo -e "${BLUE}Running: cargo build --target $target${NC}"
        cargo build --target "$target" "${cargo_args[@]}"
    fi

    echo -e "${GREEN}Build completed successfully!${NC}"

    # Show output location
    local build_dir="target/$target/$(if [[ "${cargo_args[@]}" == *"release"* ]]; then echo "release"; else echo "debug"; fi)"
    echo -e "${BLUE}Output directory: $build_dir${NC}"

    # List built artifacts
    if [[ -d "$build_dir" ]]; then
        echo -e "${BLUE}Built artifacts:${NC}"
        find "$build_dir" -type f -executable -print 2>/dev/null | head -10
    fi
}

# Parse command line arguments
target=""
verbose=false
release=false
cargo_args=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -l|--list-targets)
            list_targets
            exit 0
            ;;
        -t|--target)
            target="$2"
            shift 2
            ;;
        -r|--release)
            release=true
            cargo_args+=("--release")
            shift
            ;;
        -v|--verbose)
            verbose=true
            set -x
            shift
            ;;
        --)
            shift
            cargo_args+=("$@")
            break
            ;;
        *)
            # Unknown argument, pass to cargo
            cargo_args+=("$1")
            shift
            ;;
    esac
done

# Validate target is specified
if [[ -z "$target" ]]; then
    echo -e "${RED}Error: Target is required${NC}" >&2
    echo "Use --target TARGET or --list-targets to see available targets" >&2
    exit 1
fi

# Validate and check dependencies
if ! validate_target "$target"; then
    exit 1
fi

if ! check_dependencies "$target"; then
    exit 1
fi

# Build the target
build_target "$target" "${cargo_args[@]}"
#!/bin/bash
# RegicideOS Cross-Compilation Helper for Embedded Targets

set -euo pipefail

SCRIPT_NAME="regicide-cross-compile"
VERSION="1.0.0"

usage() {
    cat << EOF
$SCRIPT_NAME v$VERSION - RegicideOS Embedded Cross-Compilation Helper

USAGE:
    $SCRIPT_NAME [OPTIONS] --target <TARGET> [CARGO_ARGS...]

OPTIONS:
    -t, --target <TARGET>    Target architecture (required)
    -p, --project <PATH>     Project directory (default: current)
    -v, --verbose           Enable verbose output
    -h, --help              Show this help message
    --list-targets          List available embedded targets

SUPPORTED TARGETS:
    ARM Cortex-M:
        thumbv6m-none-eabi      # Cortex-M0, M0+
        thumbv7m-none-eabi      # Cortex-M3
        thumbv7em-none-eabi     # Cortex-M4, M7 (no FPU)
        thumbv7em-none-eabihf   # Cortex-M4F, M7F (with FPU)
        thumbv8m.base-none-eabi # Cortex-M23
        thumbv8m.main-none-eabi # Cortex-M33, M35P

    RISC-V:
        riscv32i-unknown-none-elf     # RV32I
        riscv32imc-unknown-none-elf   # RV32IMC
        riscv32imac-unknown-none-elf  # RV32IMAC
        riscv64gc-unknown-none-elf    # RV64GC

    Other:
        wasm32-unknown-unknown  # WebAssembly
        wasm32-wasi            # WASI WebAssembly

EXAMPLES:
    # Build for ARM Cortex-M4
    $SCRIPT_NAME --target thumbv7em-none-eabi

    # Build specific project for RISC-V
    $SCRIPT_NAME --target riscv32imc-unknown-none-elf --project ./my-embedded-project

    # Release build with verbose output
    $SCRIPT_NAME --target thumbv6m-none-eabi --verbose -- --release

EOF
}

list_targets() {
    echo "Available embedded targets:"
    rustup target list | grep -E "(thumbv|riscv|wasm)" | sort
    echo ""
    echo "Installed targets:"
    rustup target list --installed | grep -E "(thumbv|riscv|wasm)" | sort || echo "No embedded targets installed"
}

TARGET=""
PROJECT_DIR="."
VERBOSE=false
CARGO_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--target)
            TARGET="$2"
            shift 2
            ;;
        -p|--project)
            PROJECT_DIR="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --list-targets)
            list_targets
            exit 0
            ;;
        --)
            shift
            CARGO_ARGS=("$@")
            break
            ;;
        *)
            CARGO_ARGS+=("$1")
            shift
            ;;
    esac
done

if [[ -z "$TARGET" ]]; then
    echo "Error: --target is required"
    echo "Use --list-targets to see available targets"
    exit 1
fi

if [[ ! -d "$PROJECT_DIR" ]]; then
    echo "Error: Project directory '$PROJECT_DIR' does not exist"
    exit 1
fi

cd "$PROJECT_DIR"

if [[ ! -f "Cargo.toml" ]]; then
    echo "Error: No Cargo.toml found in '$PROJECT_DIR'"
    echo "This doesn't appear to be a Rust project"
    exit 1
fi

# Check if target is installed
if ! rustup target list --installed | grep -q "$TARGET"; then
    echo "Installing target $TARGET..."
    rustup target add "$TARGET"
fi

# Set up environment for cross-compilation
export RUSTFLAGS="${RUSTFLAGS:-}"

case "$TARGET" in
    thumbv*-none-eabi*)
        if ! command -v arm-none-eabi-gcc >/dev/null 2>&1; then
            echo "Warning: arm-none-eabi-gcc not found"
            echo "Install with: emerge cross-arm-none-eabi/gcc"
        fi
        ;;
    riscv*-unknown-none-elf)
        if ! command -v riscv32-unknown-elf-gcc >/dev/null 2>&1; then
            echo "Warning: riscv32-unknown-elf-gcc not found"
            echo "Install with: emerge cross-riscv32-unknown-elf/gcc"
        fi
        ;;
    wasm32-*)
        # WebAssembly doesn't need additional toolchain
        ;;
esac

# Build command
BUILD_CMD="cargo build --target $TARGET"

if [[ ${#CARGO_ARGS[@]} -gt 0 ]]; then
    BUILD_CMD="$BUILD_CMD ${CARGO_ARGS[*]}"
fi

if [[ "$VERBOSE" == true ]]; then
    echo "Building for target: $TARGET"
    echo "Project directory: $PROJECT_DIR"
    echo "Command: $BUILD_CMD"
    echo ""
fi

# Execute build
echo "Cross-compiling for $TARGET..."
exec $BUILD_CMD

{"files":[{"path":["/","Users","a","code","RegicideOS","installer","src","lib.rs"],"content":"use anyhow::{bail, Result};\nuse regex::Regex;\nuse serde::{Deserialize, Serialize};\nuse std::collections::HashMap;\nuse std::path::Path;\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Partition {\n    pub size: String,\n    pub label: Option<String>,\n    pub format: String,\n    #[serde(rename = \"type\")]\n    pub partition_type: String,\n    pub subvolumes: Option<Vec<String>>,\n    pub inside: Option<Box<Partition>>,\n}\n\n#[derive(Debug, Clone)]\npub struct Config {\n    pub drive: String,\n    pub repository: String,\n    pub flavour: String,\n    pub release_branch: String,\n    pub filesystem: String,\n    pub username: String,\n    pub applications: String,\n}\n\npub fn check_username(username: &str) -> bool {\n    if username.is_empty() {\n        return true;\n    }\n    \n    let regex = Regex::new(r\"^[a-z_][a-z0-9_]{0,30}$\").unwrap();\n    regex.is_match(username)\n}\n\npub fn human_to_bytes(size: &str) -> Result<u64> {\n    if size.is_empty() {\n        return Ok(0);\n    }\n    \n    let (number, unit) = size.split_at(size.len() - 1);\n    let number: u64 = number.parse().map_err(|_| anyhow::anyhow!(\"Invalid size number\"))?;\n    \n    let multiplier = match unit.to_uppercase().as_str() {\n        \"B\" => 1,\n        \"K\" => 1024,\n        \"M\" => 1024_u64.pow(2),\n        \"G\" => 1024_u64.pow(3),\n        \"T\" => 1024_u64.pow(4),\n        \"P\" => 1024_u64.pow(5),\n        _ => bail!(\"Invalid size unit: {}\", unit),\n    };\n    \n    Ok(number * multiplier)\n}\n\npub fn is_efi() -> bool {\n    Path::new(\"/sys/firmware/efi\").exists()\n}\n\npub fn get_fs() -> Vec<String> {\n    vec![\"btrfs\".to_string(), \"btrfs_encryption_dev\".to_string()]\n}\n\npub fn get_package_sets() -> Vec<String> {\n    vec![\"recommended\".to_string(), \"minimal\".to_string()]\n}\n\npub fn get_flatpak_packages(applications_set: &str) -> String {\n    let package_sets: HashMap<&str, Vec<&str>> = [\n        (\"recommended\", vec![\n            \"io.gitlab.librewolf-community\",\n            \"org.mozilla.Thunderbird\",\n            \"org.gnome.TextEditor\",\n            \"org.gnome.Rhythmbox3\",\n            \"org.gnome.Calculator\",\n            \"org.gnome.Totem\",\n            \"org.gnome.Loupe\",\n            \"org.libreoffice.LibreOffice\"\n        ]),\n        (\"minimal\", vec![\n            \"dev.zed.Zed\"\n        ])\n    ].into_iter().collect();\n    \n    package_sets.get(applications_set)\n        .map(|packages| packages.join(\" \"))\n        .unwrap_or_default()\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_check_username_valid() {\n        assert!(check_username(\"\"));  // Empty username is allowed\n        assert!(check_username(\"user\"));\n        assert!(check_username(\"_user\"));\n        assert!(check_username(\"user123\"));\n        assert!(check_username(\"user_name\"));\n        assert!(check_username(\"a\"));\n    }\n\n    #[test]\n    fn test_check_username_invalid() {\n        assert!(!check_username(\"User\"));  // Capital letters not allowed\n        assert!(!check_username(\"123user\"));  // Can't start with number\n        assert!(!check_username(\"user-name\"));  // Dashes not allowed\n        assert!(!check_username(\"user@domain\"));  // Special chars not allowed\n        assert!(!check_username(\"thisusernameistoolongtobevalidbecauseitisover30characters\"));  // Too long (>30 chars)\n    }\n\n    #[test]\n    fn test_human_to_bytes() -> Result<()> {\n        assert_eq!(human_to_bytes(\"512B\")?, 512);\n        assert_eq!(human_to_bytes(\"1K\")?, 1024);\n        assert_eq!(human_to_bytes(\"2M\")?, 2 * 1024 * 1024);\n        assert_eq!(human_to_bytes(\"3G\")?, 3 * 1024_u64.pow(3));\n        assert_eq!(human_to_bytes(\"1T\")?, 1024_u64.pow(4));\n        assert_eq!(human_to_bytes(\"1P\")?, 1024_u64.pow(5));\n        \n        // Test edge cases - empty string returns 0\n        assert_eq!(human_to_bytes(\"\")?, 0);\n        \n        // Test error cases\n        assert!(human_to_bytes(\"invalid\").is_err());\n        assert!(human_to_bytes(\"512X\").is_err());\n        \n        Ok(())\n    }\n\n    #[test]\n    fn test_get_fs() {\n        let filesystems = get_fs();\n        assert!(filesystems.contains(&\"btrfs\".to_string()));\n        assert!(filesystems.contains(&\"btrfs_encryption_dev\".to_string()));\n        assert_eq!(filesystems.len(), 2);\n    }\n\n    #[test]\n    fn test_get_package_sets() {\n        let package_sets = get_package_sets();\n        assert!(package_sets.contains(&\"recommended\".to_string()));\n        assert!(package_sets.contains(&\"minimal\".to_string()));\n        assert_eq!(package_sets.len(), 2);\n    }\n\n    #[test]\n    fn test_get_flatpak_packages() {\n        let recommended_packages = get_flatpak_packages(\"recommended\");\n        assert!(!recommended_packages.is_empty());\n        assert!(recommended_packages.contains(\"io.gitlab.librewolf-community\"));\n        assert!(recommended_packages.contains(\"org.libreoffice.LibreOffice\"));\n\n        let minimal_packages = get_flatpak_packages(\"minimal\");\n        assert!(!minimal_packages.is_empty());\n        assert!(minimal_packages.contains(\"dev.zed.Zed\"));\n\n        let unknown_packages = get_flatpak_packages(\"unknown\");\n        assert!(unknown_packages.is_empty());\n    }\n\n    #[test]\n    fn test_partition_struct() {\n        let partition = Partition {\n            size: \"512M\".to_string(),\n            label: Some(\"EFI\".to_string()),\n            format: \"vfat\".to_string(),\n            partition_type: \"uefi\".to_string(),\n            subvolumes: None,\n            inside: None,\n        };\n        \n        assert_eq!(partition.size, \"512M\");\n        assert_eq!(partition.label.unwrap(), \"EFI\");\n        assert_eq!(partition.format, \"vfat\");\n        assert_eq!(partition.partition_type, \"uefi\");\n    }\n\n    #[test]\n    fn test_config_struct() {\n        let config = Config {\n            drive: \"/dev/sda\".to_string(),\n            repository: \"https://repo.xenialinux.com/releases/\".to_string(),\n            flavour: \"cosmic-desktop\".to_string(),\n            release_branch: \"main\".to_string(),\n            filesystem: \"btrfs\".to_string(),\n            username: \"testuser\".to_string(),\n            applications: \"recommended\".to_string(),\n        };\n        \n        assert_eq!(config.drive, \"/dev/sda\");\n        assert_eq!(config.repository, \"https://repo.xenialinux.com/releases/\");\n        assert_eq!(config.flavour, \"cosmic-desktop\");\n        assert_eq!(config.release_branch, \"main\");\n        assert_eq!(config.filesystem, \"btrfs\");\n        assert_eq!(config.username, \"testuser\");\n        assert_eq!(config.applications, \"recommended\");\n    }\n}\n\n// Integration tests for config validation\n#[cfg(test)]\nmod integration_tests {\n    use super::*;\n    \n    #[test]\n    fn test_regicide_restrictions() {\n        // Test that RegicideOS enforces cosmic-desktop and Xenia repository\n        let valid_config = Config {\n            drive: \"/dev/sda\".to_string(),\n            repository: \"https://repo.xenialinux.com/releases/\".to_string(),\n            flavour: \"cosmic-desktop\".to_string(),\n            release_branch: \"main\".to_string(),\n            filesystem: \"btrfs\".to_string(),\n            username: \"user\".to_string(),\n            applications: \"recommended\".to_string(),\n        };\n\n        // This would be the ideal config for RegicideOS\n        assert_eq!(valid_config.repository, \"https://repo.xenialinux.com/releases/\");\n        assert_eq!(valid_config.flavour, \"cosmic-desktop\");\n    }\n    \n    #[test]\n    fn test_filesystem_options() {\n        let filesystems = get_fs();\n        \n        // RegicideOS should support both regular and encrypted BTRFS\n        assert!(filesystems.contains(&\"btrfs\".to_string()));\n        assert!(filesystems.contains(&\"btrfs_encryption_dev\".to_string()));\n        \n        // Should not contain any other filesystem types\n        for fs in &filesystems {\n            assert!(fs.contains(\"btrfs\"));\n        }\n    }\n}\n","traces":[{"line":29,"address":[],"length":0,"stats":{"Line":11}},{"line":30,"address":[],"length":0,"stats":{"Line":22}},{"line":31,"address":[],"length":0,"stats":{"Line":1}},{"line":38,"address":[],"length":0,"stats":{"Line":9}},{"line":39,"address":[],"length":0,"stats":{"Line":18}},{"line":40,"address":[],"length":0,"stats":{"Line":1}},{"line":44,"address":[],"length":0,"stats":{"Line":9}},{"line":46,"address":[],"length":0,"stats":{"Line":6}},{"line":47,"address":[],"length":0,"stats":{"Line":1}},{"line":48,"address":[],"length":0,"stats":{"Line":7}},{"line":49,"address":[],"length":0,"stats":{"Line":6}},{"line":50,"address":[],"length":0,"stats":{"Line":5}},{"line":51,"address":[],"length":0,"stats":{"Line":4}},{"line":52,"address":[],"length":0,"stats":{"Line":3}},{"line":53,"address":[],"length":0,"stats":{"Line":1}},{"line":59,"address":[],"length":0,"stats":{"Line":0}},{"line":60,"address":[],"length":0,"stats":{"Line":0}},{"line":63,"address":[],"length":0,"stats":{"Line":2}},{"line":64,"address":[],"length":0,"stats":{"Line":10}},{"line":67,"address":[],"length":0,"stats":{"Line":1}},{"line":68,"address":[],"length":0,"stats":{"Line":5}},{"line":71,"address":[],"length":0,"stats":{"Line":3}},{"line":72,"address":[],"length":0,"stats":{"Line":9}},{"line":73,"address":[],"length":0,"stats":{"Line":9}},{"line":74,"address":[],"length":0,"stats":{"Line":6}},{"line":75,"address":[],"length":0,"stats":{"Line":9}},{"line":76,"address":[],"length":0,"stats":{"Line":9}},{"line":77,"address":[],"length":0,"stats":{"Line":9}},{"line":78,"address":[],"length":0,"stats":{"Line":9}},{"line":79,"address":[],"length":0,"stats":{"Line":9}},{"line":80,"address":[],"length":0,"stats":{"Line":6}},{"line":81,"address":[],"length":0,"stats":{"Line":6}},{"line":83,"address":[],"length":0,"stats":{"Line":6}},{"line":84,"address":[],"length":0,"stats":{"Line":3}},{"line":86,"address":[],"length":0,"stats":{"Line":9}},{"line":88,"address":[],"length":0,"stats":{"Line":9}},{"line":89,"address":[],"length":0,"stats":{"Line":9}}],"covered":35,"coverable":37},{"path":["/","Users","a","code","RegicideOS","installer","src","main.rs"],"content":"use anyhow::{bail, Context, Result};\nuse clap::{Arg, Command};\nuse reqwest;\nuse std::collections::HashMap;\nuse std::fs;\nuse std::io::{self, Write};\nuse std::path::Path;\nuse std::process::Command as ProcessCommand;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::sync::Arc;\nuse tokio;\nuse toml;\n\n// Import from lib module\nuse installer::{Config, Partition, check_username, human_to_bytes, is_efi, get_fs, get_package_sets, get_flatpak_packages};\n\nstruct Colours;\n\nimpl Colours {\n    const RED: &'static str = \"\\x1b[31m\";\n    const YELLOW: &'static str = \"\\x1b[33m\";\n    const BLUE: &'static str = \"\\x1b[34m\";\n    const ENDC: &'static str = \"\\x1b[m\";\n}\n\nfn die(message: &str) -> ! {\n    eprintln!(\"{}{}{} {}\", Colours::RED, \"[ERROR]\", Colours::ENDC, message);\n    std::process::exit(1);\n}\n\nfn info(message: &str) {\n    println!(\"{}{}{} {}\", Colours::BLUE, \"[INFO]\", Colours::ENDC, message);\n}\n\nfn warn(message: &str) {\n    println!(\"{}{}{} {}\", Colours::YELLOW, \"[WARN]\", Colours::ENDC, message);\n}\n\nfn print_banner() {\n    println!(\"{}\", Colours::BLUE);\n    println!(r#\"\n    ██████╗ ███████╗ ██████╗ ██╗ ██████╗██╗██████╗ ███████╗ ██████╗ ███████╗\n    ██╔══██╗██╔════╝██╔════╝ ██║██╔════╝██║██╔══██╗██╔════╝██╔═══██╗██╔════╝\n    ██████╔╝█████╗  ██║  ███╗██║██║     ██║██║  ██║█████╗  ██║   ██║███████╗\n    ██╔══██╗██╔══╝  ██║   ██║██║██║     ██║██║  ██║██╔══╝  ██║   ██║╚════██║\n    ██║  ██║███████╗╚██████╔╝██║╚██████╗██║██████╔╝███████╗╚██████╔╝███████║\n    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝ ╚═════╝╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝\n                                                                              \n              🏰 A Rust-first, AI-powered Linux Distribution 🚀\n                        Cosmic Desktop • BTRFS • Gentoo Base\n    \"#);\n    println!(\"{}\", Colours::ENDC);\n}\n\nfn execute(command: &str) -> Result<String> {\n    let output = ProcessCommand::new(\"sh\")\n        .arg(\"-c\")\n        .arg(command)\n        .output()\n        .context(\"Failed to execute command\")?;\n\n    if !output.status.success() {\n        bail!(\"Command failed: {}\", command);\n    }\n\n    Ok(String::from_utf8_lossy(&output.stdout).to_string())\n}\n\nfn get_drive_size(drive: &str) -> Result<u64> {\n    let command = format!(\"lsblk -bo SIZE {} | grep -v SIZE | head -1\", drive);\n    let output = execute(&command)?;\n    let size_str = output.trim();\n    \n    if size_str.is_empty() {\n        Ok(0)\n    } else {\n        Ok(size_str.parse::<u64>().unwrap_or(0))\n    }\n}\n\nfn check_drive_size(drive: &str) -> bool {\n    match get_drive_size(drive) {\n        Ok(size) => size > 12884901888, // 12GB in bytes\n        Err(_) => false,\n    }\n}\n\nfn get_drives() -> Result<Vec<String>> {\n    let sys_block = Path::new(\"/sys/block\");\n    if !sys_block.exists() {\n        return Ok(vec![]);\n    }\n\n    let mut drives = Vec::new();\n    for entry in fs::read_dir(sys_block)? {\n        let entry = entry?;\n        let drive_name = entry.file_name();\n        let drive_path = format!(\"/dev/{}\", drive_name.to_string_lossy());\n        \n        if check_drive_size(&drive_path) {\n            drives.push(drive_path);\n        }\n    }\n    \n    Ok(drives)\n}\n\n\n\nasync fn check_url(url: &str) -> bool {\n    let manifest_url = format!(\"{}Manifest.toml\", url);\n    match reqwest::get(&manifest_url).await {\n        Ok(response) => response.status().is_success(),\n        Err(_) => {\n            warn(\"URL entered is not reachable, or there is no Manifest.toml available. Please try again.\");\n            false\n        }\n    }\n}\n\n\n\nfn get_layouts() -> HashMap<String, Vec<Partition>> {\n    let mut layouts = HashMap::new();\n    \n    if is_efi() {\n        layouts.insert(\"btrfs\".to_string(), vec![\n            Partition {\n                size: \"512M\".to_string(),\n                label: Some(\"EFI\".to_string()),\n                format: \"vfat\".to_string(),\n                partition_type: \"uefi\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"rest\".to_string(),\n                label: Some(\"ROOTS\".to_string()),\n                format: \"btrfs\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: Some(vec![\n                    \"/home\".to_string(),\n                    \"/overlay\".to_string(),\n                    \"/overlay/etc\".to_string(),\n                    \"/overlay/var\".to_string(),\n                    \"/overlay/usr\".to_string(),\n                ]),\n                inside: None,\n            },\n        ]);\n    } else {\n        layouts.insert(\"btrfs\".to_string(), vec![\n            Partition {\n                size: \"2M\".to_string(),\n                label: None,\n                format: \"\".to_string(),\n                partition_type: \"21686148-6449-6E6F-744E-656564454649\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"512M\".to_string(),\n                label: Some(\"BOOT\".to_string()),\n                format: \"ext4\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"rest\".to_string(),\n                label: Some(\"ROOTS\".to_string()),\n                format: \"btrfs\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: Some(vec![\n                    \"/home\".to_string(),\n                    \"/overlay\".to_string(),\n                    \"/overlay/etc\".to_string(),\n                    \"/overlay/var\".to_string(),\n                    \"/overlay/usr\".to_string(),\n                ]),\n                inside: None,\n            },\n        ]);\n    }\n    \n    if is_efi() {\n        layouts.insert(\"btrfs_encryption_dev\".to_string(), vec![\n            Partition {\n                size: \"512M\".to_string(),\n                label: Some(\"EFI\".to_string()),\n                format: \"vfat\".to_string(),\n                partition_type: \"uefi\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"8G\".to_string(),\n                label: Some(\"ROOTS\".to_string()),\n                format: \"ext4\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"rest\".to_string(),\n                label: Some(\"XENIA\".to_string()),\n                format: \"luks\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: Some(Box::new(Partition {\n                    size: \"rest\".to_string(),\n                    label: None,\n                    format: \"btrfs\".to_string(),\n                    partition_type: \"linux\".to_string(),\n                    subvolumes: Some(vec![\n                        \"/home\".to_string(),\n                        \"/overlay\".to_string(),\n                        \"/overlay/etc\".to_string(),\n                        \"/overlay/var\".to_string(),\n                        \"/overlay/usr\".to_string(),\n                    ]),\n                    inside: None,\n                })),\n            },\n        ]);\n    } else {\n        layouts.insert(\"btrfs_encryption_dev\".to_string(), vec![\n            Partition {\n                size: \"2M\".to_string(),\n                label: None,\n                format: \"\".to_string(),\n                partition_type: \"21686148-6449-6E6F-744E-656564454649\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"512M\".to_string(),\n                label: Some(\"BOOT\".to_string()),\n                format: \"ext4\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"8G\".to_string(),\n                label: Some(\"ROOTS\".to_string()),\n                format: \"ext4\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: None,\n            },\n            Partition {\n                size: \"rest\".to_string(),\n                label: Some(\"XENIA\".to_string()),\n                format: \"luks\".to_string(),\n                partition_type: \"linux\".to_string(),\n                subvolumes: None,\n                inside: Some(Box::new(Partition {\n                    size: \"rest\".to_string(),\n                    label: None,\n                    format: \"btrfs\".to_string(),\n                    partition_type: \"linux\".to_string(),\n                    subvolumes: Some(vec![\n                        \"/home\".to_string(),\n                        \"/overlay\".to_string(),\n                        \"/overlay/etc\".to_string(),\n                        \"/overlay/var\".to_string(),\n                        \"/overlay/usr\".to_string(),\n                    ]),\n                    inside: None,\n                })),\n            },\n        ]);\n    }\n    \n    layouts\n}\n\nfn wait_for_partitions(drive: &str, expected_count: usize) -> Result<Vec<String>> {\n    info(\"Waiting for kernel to recognize new partitions...\");\n    \n    let mut attempts = 0;\n    let max_attempts = 30; // Increased from 10\n    let drive_base = drive.split('/').last().unwrap_or(\"\");\n    \n    loop {\n        // Try multiple detection methods\n        let mut partition_names = Vec::new();\n        \n        // Method 1: Use lsblk to detect partitions\n        if let Ok(partitions_output) = execute(&format!(\"lsblk -ln -o NAME {}\", drive)) {\n            let detected_partitions: Vec<String> = partitions_output\n                .lines()\n                .filter(|line| !line.trim().is_empty())\n                .filter(|line| line.trim() != drive_base)\n                .map(|line| format!(\"/dev/{}\", line.trim()))\n                .collect();\n            \n            if detected_partitions.len() == expected_count {\n                // Verify all partitions actually exist as device files\n                let mut all_exist = true;\n                for part in &detected_partitions {\n                    if !Path::new(part).exists() {\n                        all_exist = false;\n                        break;\n                    }\n                }\n                if all_exist {\n                    partition_names = detected_partitions;\n                }\n            }\n        }\n        \n        // Method 2: Try numbered approach if lsblk detection fails\n        if partition_names.len() != expected_count {\n            partition_names.clear();\n            let mut all_exist = true;\n            for i in 1..=expected_count {\n                let part_name = if drive.contains(\"nvme\") || drive.chars().last().unwrap_or('a').is_ascii_digit() {\n                    format!(\"{}p{}\", drive, i)\n                } else {\n                    format!(\"{}{}\", drive, i)\n                };\n                \n                if Path::new(&part_name).exists() {\n                    partition_names.push(part_name);\n                } else {\n                    all_exist = false;\n                    break;\n                }\n            }\n            \n            if !all_exist {\n                partition_names.clear();\n            }\n        }\n        \n        if partition_names.len() == expected_count {\n            info(&format!(\"Found {} partitions\", expected_count));\n            return Ok(partition_names);\n        }\n        \n        attempts += 1;\n        if attempts >= max_attempts {\n            bail!(\"Partitions were not created properly after {} attempts. Expected {}, found {}\", \n                  max_attempts, expected_count, partition_names.len());\n        }\n        \n        // Exponential backoff with max delay\n        let delay = std::cmp::min(1000, 100 * attempts);\n        std::thread::sleep(std::time::Duration::from_millis(delay));\n        \n        // Try to refresh partition table every few attempts\n        if attempts % 5 == 0 {\n            let _ = execute(&format!(\"partprobe {}\", drive))\n                .or_else(|_| execute(&format!(\"sfdisk -R {}\", drive)))\n                .or_else(|_| execute(&format!(\"blockdev --rereadpt {}\", drive)));\n        }\n    }\n}\n\nfn set_efi_boot_flag(partition: &str) -> Result<()> {\n    // Set EFI boot flag using sgdisk if available\n    if execute(\"which sgdisk\").is_ok() {\n        let partition_num = partition.chars().last()\n            .and_then(|c| c.to_digit(10))\n            .ok_or_else(|| anyhow::anyhow!(\"Could not determine partition number from {}\", partition))?;\n        \n        let drive = if partition.contains(\"nvme\") && partition.contains(\"p\") {\n            partition.rsplit_once(\"p\").unwrap().0\n        } else {\n            partition.trim_end_matches(char::is_numeric)\n        };\n        \n        execute(&format!(\"sgdisk --set-flag={}:boot:on {}\", partition_num, drive))?;\n        info(&format!(\"Set EFI boot flag on partition {}\", partition_num));\n    } else {\n        warn(\"sgdisk not available, skipping EFI boot flag\");\n    }\n    Ok(())\n}\n\nfn partition_drive(drive: &str, layout: &[Partition]) -> Result<()> {\n    // Use sh -c to properly expand the glob pattern\n    execute(&format!(\"sh -c 'umount -ql {}?* 2>/dev/null || true'\", drive))?;\n    \n    // Check if LVM is available before trying to use it\n    let vgs_output = if Path::new(\"/sbin/vgs\").exists() || Path::new(\"/usr/sbin/vgs\").exists() {\n        execute(\"vgs | awk '{ print $1 }' | grep -vw VG\").unwrap_or_default()\n    } else {\n        String::new()\n    };\n    for vg in vgs_output.lines() {\n        let vg = vg.trim();\n        if !vg.is_empty() {\n            execute(&format!(\"vgchange -an {}\", vg))?;\n        }\n    }\n\n    let mut command = format!(\"cat <<EOF | sfdisk -q --wipe always --force {}\\nlabel: gpt\", drive);\n    let drive_size = get_drive_size(drive)?;\n    let mut running_drive_size = drive_size.saturating_sub(1048576); // for BIOS systems, -1M\n\n    for partition in layout {\n        let size_part = if partition.size == \"rest\" {\n            if !is_efi() {\n                format!(\"size={}K, \", running_drive_size / 1024)\n            } else {\n                String::new()\n            }\n        } else if partition.size.ends_with('%') {\n            let percentage: f64 = partition.size[..partition.size.len()-1].parse().unwrap_or(0.0);\n            let partition_size = ((drive_size as f64) * (percentage / 100.0)) as u64;\n            running_drive_size = running_drive_size.saturating_sub(partition_size);\n            format!(\"size={}K, \", partition_size / 1024)\n        } else {\n            let partition_size = human_to_bytes(&partition.size)?;\n            running_drive_size = running_drive_size.saturating_sub(partition_size);\n            format!(\"size={}, \", partition.size)\n        };\n        \n        command += &format!(\"\\n{}type={}\", size_part, partition.partition_type);\n    }\n\n    if !is_efi() {\n        command += \"\\ntype=21686148-6449-6E6F-744E-656564454649\";\n    }\n\n    command += \"\\nEOF\";\n    execute(&command)?;\n    \n    // Wait for partitioning to complete and inform the kernel\n    std::thread::sleep(std::time::Duration::from_secs(2));\n    \n    // Try to inform kernel of partition changes\n    if execute(\"which partprobe\").is_ok() {\n        if let Err(e) = execute(&format!(\"partprobe {}\", drive)) {\n            warn(&format!(\"partprobe failed: {}, trying other methods\", e));\n            // Try alternative approaches\n            let _ = execute(&format!(\"sfdisk -R {}\", drive))\n                .or_else(|_| execute(&format!(\"hdparm -z {}\", drive)))\n                .or_else(|_| execute(&format!(\"blockdev --rereadpt {}\", drive)));\n        }\n    } else {\n        warn(\"partprobe not available, trying alternative methods\");\n        let _ = execute(&format!(\"sfdisk -R {}\", drive))\n            .or_else(|_| execute(&format!(\"hdparm -z {}\", drive)))\n            .or_else(|_| execute(&format!(\"blockdev --rereadpt {}\", drive)));\n    }\n    \n    // Wait and verify partitions were created with improved detection\n    let _partition_names = wait_for_partitions(drive, layout.len())?;\n    \n    Ok(())\n}\n\nfn verify_filesystem(partition: &str, fs_type: &str) -> Result<()> {\n    match fs_type {\n        \"vfat\" => {\n            if execute(\"which fsck.fat\").is_ok() {\n                let result = execute(&format!(\"fsck.fat -r {}\", partition));\n                if result.is_err() {\n                    warn(&format!(\"FAT filesystem check failed for {}\", partition));\n                } else {\n                    info(&format!(\"FAT filesystem verified for {}\", partition));\n                }\n            }\n        }\n        \"ext4\" => {\n            if execute(\"which fsck.ext4\").is_ok() {\n                let result = execute(&format!(\"fsck.ext4 -n {}\", partition));\n                if result.is_err() {\n                    warn(&format!(\"ext4 filesystem check failed for {}\", partition));\n                } else {\n                    info(&format!(\"ext4 filesystem verified for {}\", partition));\n                }\n            }\n        }\n        \"btrfs\" => {\n            if execute(\"which btrfs\").is_ok() {\n                let result = execute(&format!(\"btrfs check {}\", partition));\n                if result.is_err() {\n                    warn(&format!(\"BTRFS filesystem check failed for {}\", partition));\n                } else {\n                    info(&format!(\"BTRFS filesystem verified for {}\", partition));\n                }\n            }\n        }\n        _ => {}\n    }\n    Ok(())\n}\n\nfn format_drive(drive: &str, layout: &[Partition]) -> Result<()> {\n    // Wait for kernel to recognize partitions and get reliable partition list\n    std::thread::sleep(std::time::Duration::from_secs(2));\n    \n    // Use the same reliable detection as partition_drive\n    let partition_names = wait_for_partitions(drive, layout.len())?;\n\n    for (i, partition) in layout.iter().enumerate() {\n        let current_name = &partition_names[i];\n        \n        // Double-check partition exists before formatting\n        if !Path::new(current_name).exists() {\n            bail!(\"Partition {} does not exist\", current_name);\n        }\n\n        info(&format!(\"Formatting {} as {}\", current_name, partition.format));\n        \n        match partition.format.as_str() {\n            \"vfat\" => {\n                // EFI partition formatting with validation\n                if let Some(ref label) = partition.label {\n                    execute(&format!(\"mkfs.vfat -F 32 -n {} {}\", label, current_name))?;\n                } else {\n                    execute(&format!(\"mkfs.vfat -F 32 {}\", current_name))?;\n                }\n                \n                // Set EFI boot flag if this is likely an EFI partition\n                if is_efi() && (partition.partition_type == \"uefi\" || \n                               partition.label.as_ref().map_or(false, |l| l == \"EFI\")) {\n                    if let Err(e) = set_efi_boot_flag(current_name) {\n                        warn(&format!(\"Failed to set EFI boot flag: {}\", e));\n                    }\n                }\n                \n                // Verify filesystem\n                verify_filesystem(current_name, \"vfat\")?;\n            }\n            \"ext4\" => {\n                if let Some(ref label) = partition.label {\n                    execute(&format!(\"mkfs.ext4 -L {} {}\", label, current_name))?;\n                } else {\n                    execute(&format!(\"mkfs.ext4 {}\", current_name))?;\n                }\n                verify_filesystem(current_name, \"ext4\")?;\n            }\n            \"btrfs\" => {\n                // Following Xenia's BTRFS formatting approach\n                if let Some(ref label) = partition.label {\n                    execute(&format!(\"mkfs.btrfs -L {} {}\", label, current_name))?;\n                } else {\n                    execute(&format!(\"mkfs.btrfs {}\", current_name))?;\n                }\n                \n                // Create subvolumes following Xenia's exact approach\n                if let Some(ref subvolumes) = partition.subvolumes {\n                    let temp_mount = \"/mnt/gentoo\";\n                    fs::create_dir_all(temp_mount).ok();\n                    execute(&format!(\"mount {} {}\", current_name, temp_mount))?;\n                    \n                    for subvolume in subvolumes {\n                        execute(&format!(\"btrfs subvolume create {}{}\", temp_mount, subvolume))?;\n                    }\n                    \n                    execute(&format!(\"umount {}\", temp_mount))?;\n                }\n                \n                verify_filesystem(current_name, \"btrfs\")?;\n            }\n            \"luks\" => {\n                println!(\"Setting up LUKS encryption. You will be prompted to enter a password.\");\n                \n                // Use ProcessCommand for interactive password input\n                let format_result = ProcessCommand::new(\"cryptsetup\")\n                    .args([\"-q\", \"luksFormat\", current_name])\n                    .status();\n                    \n                if !format_result.map(|s| s.success()).unwrap_or(false) {\n                    bail!(\"Failed to format LUKS partition\");\n                }\n                \n                let luks_device = if let Some(ref label) = partition.label {\n                    execute(&format!(\"cryptsetup -q config {} --label {}\", current_name, label))?;\n                    \n                    let open_result = ProcessCommand::new(\"cryptsetup\")\n                        .args([\"luksOpen\", &format!(\"/dev/disk/by-label/{}\", label), \"regicideos\"])\n                        .status();\n                        \n                    if !open_result.map(|s| s.success()).unwrap_or(false) {\n                        bail!(\"Failed to open LUKS partition\");\n                    }\n                    \n                    // Verify the device was created with timeout\n                    let mut attempts = 0;\n                    while !Path::new(\"/dev/mapper/regicideos\").exists() && attempts < 10 {\n                        std::thread::sleep(std::time::Duration::from_millis(500));\n                        attempts += 1;\n                    }\n                    \n                    if !Path::new(\"/dev/mapper/regicideos\").exists() {\n                        bail!(\"LUKS device /dev/mapper/regicideos was not created after 5 seconds\");\n                    }\n                    \n                    \"/dev/mapper/regicideos\".to_string()\n                } else {\n                    let open_result = ProcessCommand::new(\"cryptsetup\")\n                        .args([\"luksOpen\", current_name, \"regicideos\"])\n                        .status();\n                        \n                    if !open_result.map(|s| s.success()).unwrap_or(false) {\n                        bail!(\"Failed to open LUKS partition\");\n                    }\n                    \n                    // Verify the device was created with timeout\n                    let mut attempts = 0;\n                    while !Path::new(\"/dev/mapper/regicideos\").exists() && attempts < 10 {\n                        std::thread::sleep(std::time::Duration::from_millis(500));\n                        attempts += 1;\n                    }\n                    \n                    if !Path::new(\"/dev/mapper/regicideos\").exists() {\n                        bail!(\"LUKS device /dev/mapper/regicideos was not created after 5 seconds\");\n                    }\n                    \n                    \"/dev/mapper/regicideos\".to_string()\n                };\n                \n                if let Some(ref inside) = partition.inside {\n                    format_drive(&luks_device, &[*inside.clone()])?;\n                }\n            }\n            _ => {\n                warn(&format!(\"Unknown filesystem type: {}\", partition.format));\n            }\n        }\n    }\n    \n    Ok(())\n}\n\nfn chroot(command: &str) -> Result<()> {\n    let full_command = format!(\"chroot /mnt/root /bin/bash -c '{}'\", command);\n    execute(&full_command)?;\n    Ok(())\n}\n\nasync fn get_manifest(repository: &str) -> Result<toml::Value> {\n    let manifest_url = format!(\"{}Manifest.toml\", repository);\n    let response = reqwest::get(&manifest_url).await?;\n    let content = response.text().await?;\n    let manifest: toml::Value = toml::from_str(&content)?;\n    Ok(manifest)\n}\n\nasync fn get_flavours(repository: &str) -> Result<Vec<String>> {\n    let manifest = get_manifest(repository).await?;\n    let arch = \"amd64\"; // Assuming x86_64 architecture\n    \n    let mut flavours = Vec::new();\n    if let Some(table) = manifest.as_table() {\n        for (key, value) in table {\n            if let Some(flavour_table) = value.as_table() {\n                if let Some(arch_array) = flavour_table.get(\"arch\") {\n                    if let Some(arch_vec) = arch_array.as_array() {\n                        for arch_val in arch_vec {\n                            if let Some(arch_str) = arch_val.as_str() {\n                                if arch_str == arch {\n                                    flavours.push(key.clone());\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    Ok(flavours)\n}\n\nasync fn get_releases(repository: &str, flavour: &str) -> Result<Vec<String>> {\n    let manifest = get_manifest(repository).await?;\n    let arch = \"amd64\";\n    \n    let mut releases = Vec::new();\n    if let Some(flavour_table) = manifest.get(flavour).and_then(|v| v.as_table()) {\n        if let Some(versions_table) = flavour_table.get(\"versions\").and_then(|v| v.as_table()) {\n            for (version_key, version_value) in versions_table {\n                if let Some(version_table) = version_value.as_table() {\n                    if let Some(arch_array) = version_table.get(\"arch\") {\n                        if let Some(arch_vec) = arch_array.as_array() {\n                            for arch_val in arch_vec {\n                                if let Some(arch_str) = arch_val.as_str() {\n                                    if arch_str == arch {\n                                        releases.push(version_key.clone());\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    Ok(releases)\n}\n\nasync fn get_url(config: &Config) -> Result<String> {\n    let manifest = get_manifest(&config.repository).await?;\n    let arch = \"amd64\";\n    \n    if let Some(filename) = manifest\n        .get(&config.flavour)\n        .and_then(|f| f.as_table())\n        .and_then(|f| f.get(\"versions\"))\n        .and_then(|v| v.as_table())\n        .and_then(|v| v.get(&config.release_branch))\n        .and_then(|r| r.as_table())\n        .and_then(|r| r.get(\"filename\"))\n        .and_then(|f| f.as_str())\n    {\n        Ok(format!(\"{}{}/{}/{}\", config.repository, arch, config.release_branch, filename))\n    } else {\n        bail!(\"Could not find filename in manifest\")\n    }\n}\n\nfn find_partition_by_label(label: &str) -> Result<String> {\n    let label_path = format!(\"/dev/disk/by-label/{}\", label);\n    \n    // Method 1: Try by-label first\n    if Path::new(&label_path).exists() {\n        return Ok(format!(\"LABEL={}\", label));\n    }\n    \n    // Method 2: Try to find via blkid\n    if execute(\"which blkid\").is_ok() {\n        if let Ok(output) = execute(&format!(\"blkid -L {}\", label)) {\n            let device = output.trim();\n            if !device.is_empty() && Path::new(device).exists() {\n                return Ok(device.to_string());\n            }\n        }\n    }\n    \n    // Method 3: Search through all block devices\n    if let Ok(output) = execute(\"lsblk -fn -o NAME,LABEL\") {\n        for line in output.lines() {\n            let parts: Vec<&str> = line.split_whitespace().collect();\n            if parts.len() >= 2 && parts[1] == label {\n                let device = format!(\"/dev/{}\", parts[0]);\n                if Path::new(&device).exists() {\n                    return Ok(device);\n                }\n            }\n        }\n    }\n    \n    bail!(\"Could not find partition with label: {}\", label);\n}\n\nfn mount_with_retry(source: &str, target: &str, fs_type: Option<&str>, options: Option<&str>) -> Result<()> {\n    fs::create_dir_all(target).ok();\n    \n    let mut mount_cmd = format!(\"mount\");\n    \n    if let Some(opts) = options {\n        mount_cmd.push_str(&format!(\" -o {}\", opts));\n    }\n    \n    if let Some(fs) = fs_type {\n        mount_cmd.push_str(&format!(\" -t {}\", fs));\n    }\n    \n    mount_cmd.push_str(&format!(\" {} {}\", source, target));\n    \n    // Try mounting with retries\n    let mut attempts = 0;\n    let max_attempts = 5;\n    \n    loop {\n        match execute(&mount_cmd) {\n            Ok(_) => {\n                info(&format!(\"Successfully mounted {} on {}\", source, target));\n                return Ok(());\n            }\n            Err(e) => {\n                attempts += 1;\n                if attempts >= max_attempts {\n                    bail!(\"Failed to mount {} on {} after {} attempts: {}\", source, target, max_attempts, e);\n                }\n                warn(&format!(\"Mount attempt {} failed, retrying in {}ms: {}\", attempts, attempts * 500, e));\n                std::thread::sleep(std::time::Duration::from_millis(attempts * 500));\n            }\n        }\n    }\n}\n\nfn mount_roots() -> Result<()> {\n    let mount_point = \"/mnt/gentoo\";\n    \n    info(\"Finding ROOTS partition...\");\n    let roots_device = find_partition_by_label(\"ROOTS\")?;\n    \n    info(\"Mounting ROOTS partition on /mnt/gentoo\");\n    mount_with_retry(&roots_device, mount_point, None, None)?;\n    \n    Ok(())\n}\n\nfn mount() -> Result<()> {\n    fs::create_dir_all(\"/mnt/root\").ok();\n    \n    info(\"Mounting root.img on /mnt/root\");\n    mount_with_retry(\"/mnt/gentoo/root.img\", \"/mnt/root\", Some(\"squashfs\"), Some(\"ro,loop\"))?;\n    \n    // Mount EFI or BOOT partition based on system type\n    if is_efi() {\n        info(\"Finding EFI partition...\");\n        let efi_device = find_partition_by_label(\"EFI\")?;\n        \n        info(\"Mounting ESP on /mnt/root/boot/efi\");\n        mount_with_retry(&efi_device, \"/mnt/root/boot/efi\", None, None)?;\n    } else {\n        info(\"Finding BOOT partition...\");\n        let boot_device = find_partition_by_label(\"BOOT\")?;\n        \n        info(\"Mounting BOOT on /mnt/root/boot\");\n        mount_with_retry(&boot_device, \"/mnt/root/boot\", None, None)?;\n    }\n    \n    info(\"Mounting special filesystems\");\n    mount_with_retry(\"/proc\", \"/mnt/root/proc\", Some(\"proc\"), None)?;\n    execute(\"mount --rbind /dev /mnt/root/dev\")?;\n    execute(\"mount --rbind /sys /mnt/root/sys\")?;\n    execute(\"mount --bind /run /mnt/root/run\")?;\n    execute(\"mount --make-slave /mnt/root/run\")?;\n    \n    Ok(())\n}\n\nasync fn download_root(url: &str) -> Result<()> {\n    let root_img_path = \"/mnt/gentoo/root.img\";\n    \n    if Path::new(root_img_path).exists() {\n        fs::remove_file(root_img_path)?;\n    }\n    \n    info(&format!(\"Downloading root image from {}\", url));\n    let response = reqwest::get(url).await?;\n    \n    if !response.status().is_success() {\n        bail!(\"Failed to download root image: HTTP {}\", response.status());\n    }\n    \n    let bytes = response.bytes().await?;\n    \n    if bytes.is_empty() {\n        bail!(\"Downloaded root image is empty\");\n    }\n    \n    fs::write(root_img_path, bytes)?;\n    \n    // Verify the file was written and has content\n    let metadata = fs::metadata(root_img_path)?;\n    if metadata.len() == 0 {\n        bail!(\"Root image file is empty after download\");\n    }\n    \n    info(&format!(\"Downloaded {} bytes\", metadata.len()));\n    Ok(())\n}\n\nfn install_bootloader(platform: &str, device: &str) -> Result<()> {\n    let grub = if Path::new(\"/mnt/root/usr/bin/grub-install\").exists() {\n        \"grub\"\n    } else {\n        \"grub2\"\n    };\n\n    if platform.contains(\"efi\") {\n        chroot(&format!(\n            \"{}-install --force --target=\\\"{}\\\" --efi-directory=\\\"/boot/efi\\\" --boot-directory=\\\"/boot/efi\\\"\",\n            grub, platform\n        ))?;\n        chroot(&format!(\"{}-mkconfig -o /boot/efi/{}/grub.cfg\", grub, grub))?;\n    } else {\n        chroot(&format!(\n            \"{}-install --force --target=\\\"{}\\\" --boot-directory=\\\"/boot\\\" {}\",\n            grub, platform, device\n        ))?;\n        chroot(&format!(\"{}-mkconfig -o /boot/{}/grub.cfg\", grub, grub))?;\n    }\n    \n    Ok(())\n}\n\nfn post_install(config: &Config) -> Result<()> {\n    let layout_name = &config.filesystem;\n    info(\"Mounting overlays & home\");\n\n    let (etc_path, var_path, usr_path) = match layout_name.as_str() {\n        \"btrfs\" => {\n            fs::create_dir_all(\"/mnt/root/overlay\").ok();\n            fs::create_dir_all(\"/mnt/root/home\").ok();\n            execute(\"mount -L ROOTS -o subvol=overlay /mnt/root/overlay\")?;\n            execute(\"mount -L ROOTS -o subvol=home /mnt/root/home\")?;\n            (\"/mnt/root/overlay/etc\", \"/mnt/root/overlay/var\", \"/mnt/root/overlay/usr\")\n        }\n        \"btrfs_encryption_dev\" => {\n            if !Path::new(\"/dev/mapper/regicideos\").exists() {\n                bail!(\"LUKS device /dev/mapper/regicideos not found\");\n            }\n            fs::create_dir_all(\"/mnt/root/overlay\").ok();\n            fs::create_dir_all(\"/mnt/root/home\").ok();\n            execute(\"mount /dev/mapper/regicideos -o subvol=overlay /mnt/root/overlay\")?;\n            execute(\"mount /dev/mapper/regicideos -o subvol=home /mnt/root/home\")?;\n            (\"/mnt/root/overlay/etc\", \"/mnt/root/overlay/var\", \"/mnt/root/overlay/usr\")\n        }\n        _ => {\n            if !Path::new(\"/dev/disk/by-label/OVERLAY\").exists() {\n                bail!(\"OVERLAY partition not found\");\n            }\n            if !Path::new(\"/dev/disk/by-label/HOME\").exists() {\n                bail!(\"HOME partition not found\");\n            }\n            fs::create_dir_all(\"/mnt/root/overlay\").ok();\n            fs::create_dir_all(\"/mnt/root/home\").ok();\n            execute(\"mount -L OVERLAY /mnt/root/overlay\")?;\n            execute(\"mount -L HOME /mnt/root/home\")?;\n            (\"/mnt/root/overlay\", \"/mnt/root/overlay\", \"/mnt/root/overlay\")\n        }\n    };\n\n    let paths = [\n        format!(\"{}/etc\", etc_path),\n        format!(\"{}/etcw\", etc_path),\n        format!(\"{}/var\", var_path),\n        format!(\"{}/varw\", var_path),\n        format!(\"{}/usr\", usr_path),\n        format!(\"{}/usrw\", usr_path),\n    ];\n\n    for path in &paths {\n        fs::create_dir_all(path).ok();\n    }\n\n    execute(&format!(\n        \"mount -t overlay overlay -o lowerdir=/mnt/root/usr,upperdir={}/usr,workdir={}/usrw,ro /mnt/root/usr\",\n        usr_path, usr_path\n    ))?;\n    execute(&format!(\n        \"mount -t overlay overlay -o lowerdir=/mnt/root/etc,upperdir={}/etc,workdir={}/etcw,rw /mnt/root/etc\",\n        etc_path, etc_path\n    ))?;\n    execute(&format!(\n        \"mount -t overlay overlay -o lowerdir=/mnt/root/var,upperdir={}/var,workdir={}/varw,rw /mnt/root/var\",\n        var_path, var_path\n    ))?;\n\n    if !config.username.is_empty() {\n        info(\"Creating user\");\n        chroot(&format!(\"useradd -m {}\", config.username))?;\n\n        let mut attempts = 0;\n        loop {\n            let result = ProcessCommand::new(\"chroot\")\n                .args([\"/mnt/root\", \"/bin/bash\", \"-c\", &format!(\"passwd {}\", config.username)])\n                .status();\n                \n            match result {\n                Ok(status) if status.success() => break,\n                _ => {\n                    attempts += 1;\n                    if attempts >= 3 {\n                        warn(\"Failed to set password after 3 attempts. User will need to set password manually.\");\n                        break;\n                    }\n                    println!(\"Password setting failed. Please try again.\");\n                }\n            }\n        }\n\n        chroot(&format!(\"usermod -aG wheel,video {}\", config.username))?;\n    }\n\n    let flatpaks = get_flatpak_packages(&config.applications);\n    if !flatpaks.is_empty() {\n        fs::create_dir_all(\"/mnt/root/etc/declare\").ok();\n        fs::write(\"/mnt/root/etc/declare/flatpak\", flatpaks)?;\n\n        if !Path::new(\"/mnt/root/usr/bin/rc-service\").exists() {\n            chroot(\"systemctl enable declareflatpak\")?;\n        } else {\n            chroot(\"rc-update add declareflatpak\")?;\n        }\n    }\n\n    Ok(())\n}\n\nfn get_input(prompt: &str, default: &str) -> String {\n    print!(\"{}. Valid options are {}\\n{}[{}]{}: \", \n           prompt, \"\", Colours::BLUE, default, Colours::ENDC);\n    io::stdout().flush().unwrap();\n    \n    let mut input = String::new();\n    io::stdin().read_line(&mut input).unwrap();\n    let input = input.trim();\n    \n    if input.is_empty() {\n        default.to_string()\n    } else {\n        input.to_string()\n    }\n}\n\nasync fn parse_config(mut config: Config, interactive: bool) -> Result<Config> {\n    // Validate drive\n    let drives = get_drives()?;\n    if config.drive.is_empty() || !drives.contains(&config.drive) {\n        if interactive {\n            println!(\"Available drives: {:?}\", drives);\n            config.drive = get_input(\"Enter drive\", drives.first().unwrap_or(&String::new()));\n        } else {\n            die(\"Invalid or missing drive in config\");\n        }\n    }\n\n    // RegicideOS only supports the official Xenia Linux repository\n    const REGICIDE_REPOSITORY: &str = \"https://repo.xenialinux.com/releases/\";\n    if config.repository.is_empty() {\n        config.repository = REGICIDE_REPOSITORY.to_string();\n    } else if config.repository != REGICIDE_REPOSITORY {\n        if interactive {\n            warn(&format!(\"RegicideOS only supports the official Xenia repository. Using: {}\", REGICIDE_REPOSITORY));\n            config.repository = REGICIDE_REPOSITORY.to_string();\n        } else {\n            die(&format!(\"RegicideOS only supports the official Xenia repository: {}\", REGICIDE_REPOSITORY));\n        }\n    }\n\n    // Validate repository accessibility\n    if !check_url(&config.repository).await {\n        die(\"Cannot access the Xenia Linux repository\");\n    }\n\n    // RegicideOS only supports cosmic-desktop flavour (available in Xenia repository)\n    const REGICIDE_FLAVOUR: &str = \"cosmic-desktop\";\n    if config.flavour.is_empty() {\n        config.flavour = REGICIDE_FLAVOUR.to_string();\n    } else if config.flavour != REGICIDE_FLAVOUR {\n        if interactive {\n            warn(&format!(\"RegicideOS only supports the cosmic-desktop flavour. Using: {}\", REGICIDE_FLAVOUR));\n            config.flavour = REGICIDE_FLAVOUR.to_string();\n        } else {\n            die(&format!(\"RegicideOS only supports the cosmic-desktop flavour: {}\", REGICIDE_FLAVOUR));\n        }\n    }\n\n    // Verify the cosmic-desktop flavour is available in the repository\n    let flavours = get_flavours(&config.repository).await?;\n    if !flavours.contains(&config.flavour) {\n        die(&format!(\"The {} flavour is not available in the repository\", config.flavour));\n    }\n\n    // Validate release branch\n    let releases = get_releases(&config.repository, &config.flavour).await?;\n    if config.release_branch.is_empty() || !releases.contains(&config.release_branch) {\n        if interactive {\n            println!(\"Available releases: {:?}\", releases);\n            config.release_branch = get_input(\"Enter release branch\", releases.first().unwrap_or(&\"main\".to_string()));\n        } else {\n            die(\"Invalid or missing release branch in config\");\n        }\n    }\n\n    // Validate filesystem\n    let filesystems = get_fs();\n    if config.filesystem.is_empty() || !filesystems.contains(&config.filesystem) {\n        if interactive {\n            println!(\"Available filesystems: {:?}\", filesystems);\n            config.filesystem = get_input(\"Enter filesystem\", \"btrfs\");\n        } else {\n            die(\"Invalid or missing filesystem in config\");\n        }\n    }\n\n    // Validate username\n    if !check_username(&config.username) {\n        if interactive {\n            config.username = get_input(\"Enter username (leave empty for none)\", \"\");\n        } else {\n            die(\"Invalid username in config\");\n        }\n    }\n\n    // Validate applications\n    let package_sets = get_package_sets();\n    if config.applications.is_empty() || !package_sets.contains(&config.applications) {\n        if interactive {\n            println!(\"Available package sets: {:?}\", package_sets);\n            config.applications = get_input(\"Enter applications set\", \"minimal\");\n        } else {\n            die(\"Invalid or missing applications in config\");\n        }\n    }\n\n    Ok(config)\n}\n\nfn cleanup_on_failure() {\n    warn(\"Cleaning up due to installation failure...\");\n    \n    // Unmount filesystems\n    let _ = execute(\"umount -R /mnt/root 2>/dev/null\");\n    let _ = execute(\"umount /mnt/gentoo 2>/dev/null\");\n    let _ = execute(\"umount /mnt/temp_btrfs 2>/dev/null\");\n    \n    // Close LUKS devices\n    let _ = execute(\"cryptsetup close regicideos 2>/dev/null\");\n    \n    // Remove temporary directories\n    let _ = fs::remove_dir_all(\"/mnt/temp_btrfs\");\n    let _ = fs::remove_dir_all(\"/mnt/gentoo\");\n    let _ = fs::remove_dir_all(\"/mnt/root\");\n    \n    info(\"Cleanup completed\");\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Set up cleanup handler\n    let cleanup_flag = Arc::new(AtomicBool::new(false));\n    let cleanup_flag_clone = cleanup_flag.clone();\n    \n    ctrlc::set_handler(move || {\n        if !cleanup_flag_clone.load(Ordering::Relaxed) {\n            cleanup_flag_clone.store(true, Ordering::Relaxed);\n            cleanup_on_failure();\n            std::process::exit(1);\n        }\n    }).expect(\"Error setting Ctrl-C handler\");\n    let matches = Command::new(\"RegicideOS Installer\")\n        .about(\"Program to install RegicideOS\")\n        .arg(\n            Arg::new(\"config\")\n                .short('c')\n                .long(\"config\")\n                .value_name(\"FILE\")\n                .help(\"Run the installer automated from a toml config file\")\n        )\n        .get_matches();\n\n    let config_file = matches.get_one::<String>(\"config\");\n    let interactive = config_file.is_none();\n\n    print_banner();\n\n    info(&format!(\"{} detected.\", if is_efi() { \"EFI\" } else { \"BIOS\" }));\n\n    let mut config = Config {\n        drive: String::new(),\n        repository: String::new(),\n        flavour: String::new(),\n        release_branch: String::new(),\n        filesystem: String::new(),\n        username: String::new(),\n        applications: String::new(),\n    };\n\n    if let Some(config_path) = config_file {\n        if !Path::new(config_path).exists() {\n            die(&format!(\"Config file {} does not exist.\", config_path));\n        }\n\n        let config_content = fs::read_to_string(config_path)?;\n        let config_toml: toml::Value = toml::from_str(&config_content)?;\n\n        config.drive = config_toml.get(\"drive\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.repository = config_toml.get(\"repository\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.flavour = config_toml.get(\"flavour\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.release_branch = config_toml.get(\"release_branch\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.filesystem = config_toml.get(\"filesystem\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.username = config_toml.get(\"username\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n        config.applications = config_toml.get(\"applications\").and_then(|v| v.as_str()).unwrap_or(\"\").to_string();\n    }\n\n    if interactive {\n        info(&format!(\n            \"Entering interactive mode. Default values are shown wrapped in square brackets like {}[this]{}. Press enter to accept the default.\\n\",\n            Colours::BLUE, Colours::ENDC\n        ));\n    } else {\n        info(\"Checking config\");\n    }\n\n    let config_parsed = parse_config(config, interactive).await?;\n    info(\"Done checking config\");\n\n    if interactive {\n        warn(&format!(\n            \"Drive partitioning is about to start. After this process, drive {} will be erased. Press enter to continue.\",\n            config_parsed.drive\n        ));\n        let mut input = String::new();\n        io::stdin().read_line(&mut input)?;\n    }\n\n    let layouts = get_layouts();\n    let layout = layouts.get(&config_parsed.filesystem).unwrap();\n\n    info(&format!(\"Partitioning drive {}\", config_parsed.drive));\n    partition_drive(&config_parsed.drive, layout)?;\n\n    info(&format!(\"Formatting drive {}\", config_parsed.drive));\n    format_drive(&config_parsed.drive, layout)?;\n\n    info(\"Starting installation\");\n    mount_roots()?;\n\n    info(\"Downloading root image\");\n    let root_url = get_url(&config_parsed).await?;\n    download_root(&root_url).await?;\n    mount()?;\n\n    info(\"Installing bootloader\");\n    let platform = if is_efi() { \"x86_64-efi\" } else { \"i386-pc\" };\n    install_bootloader(platform, &config_parsed.drive)?;\n\n    info(\"Starting post-installation tasks\");\n    post_install(&config_parsed)?;\n\n    info(\"Installation completed successfully!\");\n\n    Ok(()).or_else(|e| {\n        cleanup_on_failure();\n        Err(e)\n    })\n}\n","traces":[{"line":26,"address":[],"length":0,"stats":{"Line":0}},{"line":27,"address":[],"length":0,"stats":{"Line":0}},{"line":28,"address":[],"length":0,"stats":{"Line":0}},{"line":31,"address":[],"length":0,"stats":{"Line":0}},{"line":32,"address":[],"length":0,"stats":{"Line":0}},{"line":35,"address":[],"length":0,"stats":{"Line":0}},{"line":36,"address":[],"length":0,"stats":{"Line":0}},{"line":39,"address":[],"length":0,"stats":{"Line":0}},{"line":40,"address":[],"length":0,"stats":{"Line":0}},{"line":41,"address":[],"length":0,"stats":{"Line":0}},{"line":42,"address":[],"length":0,"stats":{"Line":0}},{"line":43,"address":[],"length":0,"stats":{"Line":0}},{"line":44,"address":[],"length":0,"stats":{"Line":0}},{"line":45,"address":[],"length":0,"stats":{"Line":0}},{"line":46,"address":[],"length":0,"stats":{"Line":0}},{"line":47,"address":[],"length":0,"stats":{"Line":0}},{"line":49,"address":[],"length":0,"stats":{"Line":0}},{"line":50,"address":[],"length":0,"stats":{"Line":0}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":52,"address":[],"length":0,"stats":{"Line":0}},{"line":55,"address":[],"length":0,"stats":{"Line":0}},{"line":56,"address":[],"length":0,"stats":{"Line":0}},{"line":58,"address":[],"length":0,"stats":{"Line":0}},{"line":62,"address":[],"length":0,"stats":{"Line":0}},{"line":63,"address":[],"length":0,"stats":{"Line":0}},{"line":66,"address":[],"length":0,"stats":{"Line":0}},{"line":69,"address":[],"length":0,"stats":{"Line":0}},{"line":70,"address":[],"length":0,"stats":{"Line":0}},{"line":71,"address":[],"length":0,"stats":{"Line":0}},{"line":72,"address":[],"length":0,"stats":{"Line":0}},{"line":74,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":0}},{"line":77,"address":[],"length":0,"stats":{"Line":0}},{"line":81,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":83,"address":[],"length":0,"stats":{"Line":0}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":88,"address":[],"length":0,"stats":{"Line":0}},{"line":89,"address":[],"length":0,"stats":{"Line":0}},{"line":90,"address":[],"length":0,"stats":{"Line":0}},{"line":91,"address":[],"length":0,"stats":{"Line":0}},{"line":94,"address":[],"length":0,"stats":{"Line":0}},{"line":95,"address":[],"length":0,"stats":{"Line":0}},{"line":96,"address":[],"length":0,"stats":{"Line":0}},{"line":97,"address":[],"length":0,"stats":{"Line":0}},{"line":98,"address":[],"length":0,"stats":{"Line":0}},{"line":100,"address":[],"length":0,"stats":{"Line":0}},{"line":101,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":110,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":115,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":126,"address":[],"length":0,"stats":{"Line":0}},{"line":127,"address":[],"length":0,"stats":{"Line":0}},{"line":128,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[],"length":0,"stats":{"Line":0}},{"line":134,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":139,"address":[],"length":0,"stats":{"Line":0}},{"line":140,"address":[],"length":0,"stats":{"Line":0}},{"line":141,"address":[],"length":0,"stats":{"Line":0}},{"line":142,"address":[],"length":0,"stats":{"Line":0}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":144,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":0}},{"line":154,"address":[],"length":0,"stats":{"Line":0}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":164,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":167,"address":[],"length":0,"stats":{"Line":0}},{"line":169,"address":[],"length":0,"stats":{"Line":0}},{"line":170,"address":[],"length":0,"stats":{"Line":0}},{"line":171,"address":[],"length":0,"stats":{"Line":0}},{"line":172,"address":[],"length":0,"stats":{"Line":0}},{"line":173,"address":[],"length":0,"stats":{"Line":0}},{"line":174,"address":[],"length":0,"stats":{"Line":0}},{"line":175,"address":[],"length":0,"stats":{"Line":0}},{"line":176,"address":[],"length":0,"stats":{"Line":0}},{"line":177,"address":[],"length":0,"stats":{"Line":0}},{"line":178,"address":[],"length":0,"stats":{"Line":0}},{"line":179,"address":[],"length":0,"stats":{"Line":0}},{"line":181,"address":[],"length":0,"stats":{"Line":0}},{"line":186,"address":[],"length":0,"stats":{"Line":0}},{"line":187,"address":[],"length":0,"stats":{"Line":0}},{"line":188,"address":[],"length":0,"stats":{"Line":0}},{"line":189,"address":[],"length":0,"stats":{"Line":0}},{"line":190,"address":[],"length":0,"stats":{"Line":0}},{"line":191,"address":[],"length":0,"stats":{"Line":0}},{"line":192,"address":[],"length":0,"stats":{"Line":0}},{"line":193,"address":[],"length":0,"stats":{"Line":0}},{"line":194,"address":[],"length":0,"stats":{"Line":0}},{"line":196,"address":[],"length":0,"stats":{"Line":0}},{"line":197,"address":[],"length":0,"stats":{"Line":0}},{"line":198,"address":[],"length":0,"stats":{"Line":0}},{"line":199,"address":[],"length":0,"stats":{"Line":0}},{"line":200,"address":[],"length":0,"stats":{"Line":0}},{"line":201,"address":[],"length":0,"stats":{"Line":0}},{"line":202,"address":[],"length":0,"stats":{"Line":0}},{"line":204,"address":[],"length":0,"stats":{"Line":0}},{"line":205,"address":[],"length":0,"stats":{"Line":0}},{"line":206,"address":[],"length":0,"stats":{"Line":0}},{"line":207,"address":[],"length":0,"stats":{"Line":0}},{"line":208,"address":[],"length":0,"stats":{"Line":0}},{"line":209,"address":[],"length":0,"stats":{"Line":0}},{"line":210,"address":[],"length":0,"stats":{"Line":0}},{"line":211,"address":[],"length":0,"stats":{"Line":0}},{"line":212,"address":[],"length":0,"stats":{"Line":0}},{"line":213,"address":[],"length":0,"stats":{"Line":0}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":215,"address":[],"length":0,"stats":{"Line":0}},{"line":216,"address":[],"length":0,"stats":{"Line":0}},{"line":217,"address":[],"length":0,"stats":{"Line":0}},{"line":218,"address":[],"length":0,"stats":{"Line":0}},{"line":219,"address":[],"length":0,"stats":{"Line":0}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":222,"address":[],"length":0,"stats":{"Line":0}},{"line":227,"address":[],"length":0,"stats":{"Line":0}},{"line":228,"address":[],"length":0,"stats":{"Line":0}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":230,"address":[],"length":0,"stats":{"Line":0}},{"line":231,"address":[],"length":0,"stats":{"Line":0}},{"line":232,"address":[],"length":0,"stats":{"Line":0}},{"line":233,"address":[],"length":0,"stats":{"Line":0}},{"line":234,"address":[],"length":0,"stats":{"Line":0}},{"line":236,"address":[],"length":0,"stats":{"Line":0}},{"line":237,"address":[],"length":0,"stats":{"Line":0}},{"line":238,"address":[],"length":0,"stats":{"Line":0}},{"line":239,"address":[],"length":0,"stats":{"Line":0}},{"line":240,"address":[],"length":0,"stats":{"Line":0}},{"line":241,"address":[],"length":0,"stats":{"Line":0}},{"line":242,"address":[],"length":0,"stats":{"Line":0}},{"line":244,"address":[],"length":0,"stats":{"Line":0}},{"line":245,"address":[],"length":0,"stats":{"Line":0}},{"line":246,"address":[],"length":0,"stats":{"Line":0}},{"line":247,"address":[],"length":0,"stats":{"Line":0}},{"line":248,"address":[],"length":0,"stats":{"Line":0}},{"line":249,"address":[],"length":0,"stats":{"Line":0}},{"line":250,"address":[],"length":0,"stats":{"Line":0}},{"line":252,"address":[],"length":0,"stats":{"Line":0}},{"line":253,"address":[],"length":0,"stats":{"Line":0}},{"line":254,"address":[],"length":0,"stats":{"Line":0}},{"line":255,"address":[],"length":0,"stats":{"Line":0}},{"line":256,"address":[],"length":0,"stats":{"Line":0}},{"line":257,"address":[],"length":0,"stats":{"Line":0}},{"line":258,"address":[],"length":0,"stats":{"Line":0}},{"line":259,"address":[],"length":0,"stats":{"Line":0}},{"line":260,"address":[],"length":0,"stats":{"Line":0}},{"line":261,"address":[],"length":0,"stats":{"Line":0}},{"line":262,"address":[],"length":0,"stats":{"Line":0}},{"line":263,"address":[],"length":0,"stats":{"Line":0}},{"line":264,"address":[],"length":0,"stats":{"Line":0}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":0}},{"line":267,"address":[],"length":0,"stats":{"Line":0}},{"line":268,"address":[],"length":0,"stats":{"Line":0}},{"line":270,"address":[],"length":0,"stats":{"Line":0}},{"line":276,"address":[],"length":0,"stats":{"Line":0}},{"line":279,"address":[],"length":0,"stats":{"Line":0}},{"line":280,"address":[],"length":0,"stats":{"Line":0}},{"line":282,"address":[],"length":0,"stats":{"Line":0}},{"line":283,"address":[],"length":0,"stats":{"Line":0}},{"line":284,"address":[],"length":0,"stats":{"Line":0}},{"line":288,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":0}},{"line":292,"address":[],"length":0,"stats":{"Line":0}},{"line":294,"address":[],"length":0,"stats":{"Line":0}},{"line":295,"address":[],"length":0,"stats":{"Line":0}},{"line":296,"address":[],"length":0,"stats":{"Line":0}},{"line":299,"address":[],"length":0,"stats":{"Line":0}},{"line":301,"address":[],"length":0,"stats":{"Line":0}},{"line":302,"address":[],"length":0,"stats":{"Line":0}},{"line":303,"address":[],"length":0,"stats":{"Line":0}},{"line":304,"address":[],"length":0,"stats":{"Line":0}},{"line":305,"address":[],"length":0,"stats":{"Line":0}},{"line":308,"address":[],"length":0,"stats":{"Line":0}},{"line":309,"address":[],"length":0,"stats":{"Line":0}},{"line":315,"address":[],"length":0,"stats":{"Line":0}},{"line":316,"address":[],"length":0,"stats":{"Line":0}},{"line":317,"address":[],"length":0,"stats":{"Line":0}},{"line":318,"address":[],"length":0,"stats":{"Line":0}},{"line":319,"address":[],"length":0,"stats":{"Line":0}},{"line":320,"address":[],"length":0,"stats":{"Line":0}},{"line":322,"address":[],"length":0,"stats":{"Line":0}},{"line":325,"address":[],"length":0,"stats":{"Line":0}},{"line":326,"address":[],"length":0,"stats":{"Line":0}},{"line":328,"address":[],"length":0,"stats":{"Line":0}},{"line":329,"address":[],"length":0,"stats":{"Line":0}},{"line":333,"address":[],"length":0,"stats":{"Line":0}},{"line":334,"address":[],"length":0,"stats":{"Line":0}},{"line":338,"address":[],"length":0,"stats":{"Line":0}},{"line":339,"address":[],"length":0,"stats":{"Line":0}},{"line":340,"address":[],"length":0,"stats":{"Line":0}},{"line":343,"address":[],"length":0,"stats":{"Line":0}},{"line":344,"address":[],"length":0,"stats":{"Line":0}},{"line":345,"address":[],"length":0,"stats":{"Line":0}},{"line":346,"address":[],"length":0,"stats":{"Line":0}},{"line":350,"address":[],"length":0,"stats":{"Line":0}},{"line":351,"address":[],"length":0,"stats":{"Line":0}},{"line":354,"address":[],"length":0,"stats":{"Line":0}},{"line":355,"address":[],"length":0,"stats":{"Line":0}},{"line":356,"address":[],"length":0,"stats":{"Line":0}},{"line":357,"address":[],"length":0,"stats":{"Line":0}},{"line":362,"address":[],"length":0,"stats":{"Line":0}},{"line":364,"address":[],"length":0,"stats":{"Line":0}},{"line":365,"address":[],"length":0,"stats":{"Line":0}},{"line":366,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":0}},{"line":369,"address":[],"length":0,"stats":{"Line":0}},{"line":370,"address":[],"length":0,"stats":{"Line":0}},{"line":372,"address":[],"length":0,"stats":{"Line":0}},{"line":375,"address":[],"length":0,"stats":{"Line":0}},{"line":376,"address":[],"length":0,"stats":{"Line":0}},{"line":378,"address":[],"length":0,"stats":{"Line":0}},{"line":380,"address":[],"length":0,"stats":{"Line":0}},{"line":383,"address":[],"length":0,"stats":{"Line":0}},{"line":385,"address":[],"length":0,"stats":{"Line":0}},{"line":388,"address":[],"length":0,"stats":{"Line":0}},{"line":389,"address":[],"length":0,"stats":{"Line":0}},{"line":391,"address":[],"length":0,"stats":{"Line":0}},{"line":393,"address":[],"length":0,"stats":{"Line":0}},{"line":394,"address":[],"length":0,"stats":{"Line":0}},{"line":395,"address":[],"length":0,"stats":{"Line":0}},{"line":396,"address":[],"length":0,"stats":{"Line":0}},{"line":400,"address":[],"length":0,"stats":{"Line":0}},{"line":401,"address":[],"length":0,"stats":{"Line":0}},{"line":402,"address":[],"length":0,"stats":{"Line":0}},{"line":404,"address":[],"length":0,"stats":{"Line":0}},{"line":405,"address":[],"length":0,"stats":{"Line":0}},{"line":406,"address":[],"length":0,"stats":{"Line":0}},{"line":407,"address":[],"length":0,"stats":{"Line":0}},{"line":409,"address":[],"length":0,"stats":{"Line":0}},{"line":411,"address":[],"length":0,"stats":{"Line":0}},{"line":412,"address":[],"length":0,"stats":{"Line":0}},{"line":413,"address":[],"length":0,"stats":{"Line":0}},{"line":414,"address":[],"length":0,"stats":{"Line":0}},{"line":415,"address":[],"length":0,"stats":{"Line":0}},{"line":417,"address":[],"length":0,"stats":{"Line":0}},{"line":418,"address":[],"length":0,"stats":{"Line":0}},{"line":419,"address":[],"length":0,"stats":{"Line":0}},{"line":422,"address":[],"length":0,"stats":{"Line":0}},{"line":425,"address":[],"length":0,"stats":{"Line":0}},{"line":426,"address":[],"length":0,"stats":{"Line":0}},{"line":429,"address":[],"length":0,"stats":{"Line":0}},{"line":430,"address":[],"length":0,"stats":{"Line":0}},{"line":433,"address":[],"length":0,"stats":{"Line":0}},{"line":436,"address":[],"length":0,"stats":{"Line":0}},{"line":437,"address":[],"length":0,"stats":{"Line":0}},{"line":438,"address":[],"length":0,"stats":{"Line":0}},{"line":440,"address":[],"length":0,"stats":{"Line":0}},{"line":441,"address":[],"length":0,"stats":{"Line":0}},{"line":442,"address":[],"length":0,"stats":{"Line":0}},{"line":445,"address":[],"length":0,"stats":{"Line":0}},{"line":446,"address":[],"length":0,"stats":{"Line":0}},{"line":447,"address":[],"length":0,"stats":{"Line":0}},{"line":448,"address":[],"length":0,"stats":{"Line":0}},{"line":452,"address":[],"length":0,"stats":{"Line":0}},{"line":454,"address":[],"length":0,"stats":{"Line":0}},{"line":457,"address":[],"length":0,"stats":{"Line":0}},{"line":458,"address":[],"length":0,"stats":{"Line":0}},{"line":459,"address":[],"length":0,"stats":{"Line":0}},{"line":460,"address":[],"length":0,"stats":{"Line":0}},{"line":461,"address":[],"length":0,"stats":{"Line":0}},{"line":462,"address":[],"length":0,"stats":{"Line":0}},{"line":463,"address":[],"length":0,"stats":{"Line":0}},{"line":465,"address":[],"length":0,"stats":{"Line":0}},{"line":469,"address":[],"length":0,"stats":{"Line":0}},{"line":470,"address":[],"length":0,"stats":{"Line":0}},{"line":471,"address":[],"length":0,"stats":{"Line":0}},{"line":472,"address":[],"length":0,"stats":{"Line":0}},{"line":473,"address":[],"length":0,"stats":{"Line":0}},{"line":475,"address":[],"length":0,"stats":{"Line":0}},{"line":479,"address":[],"length":0,"stats":{"Line":0}},{"line":480,"address":[],"length":0,"stats":{"Line":0}},{"line":481,"address":[],"length":0,"stats":{"Line":0}},{"line":482,"address":[],"length":0,"stats":{"Line":0}},{"line":483,"address":[],"length":0,"stats":{"Line":0}},{"line":485,"address":[],"length":0,"stats":{"Line":0}},{"line":489,"address":[],"length":0,"stats":{"Line":0}},{"line":491,"address":[],"length":0,"stats":{"Line":0}},{"line":494,"address":[],"length":0,"stats":{"Line":0}},{"line":496,"address":[],"length":0,"stats":{"Line":0}},{"line":499,"address":[],"length":0,"stats":{"Line":0}},{"line":501,"address":[],"length":0,"stats":{"Line":0}},{"line":502,"address":[],"length":0,"stats":{"Line":0}},{"line":505,"address":[],"length":0,"stats":{"Line":0}},{"line":506,"address":[],"length":0,"stats":{"Line":0}},{"line":509,"address":[],"length":0,"stats":{"Line":0}},{"line":511,"address":[],"length":0,"stats":{"Line":0}},{"line":512,"address":[],"length":0,"stats":{"Line":0}},{"line":514,"address":[],"length":0,"stats":{"Line":0}},{"line":515,"address":[],"length":0,"stats":{"Line":0}},{"line":517,"address":[],"length":0,"stats":{"Line":0}},{"line":521,"address":[],"length":0,"stats":{"Line":0}},{"line":522,"address":[],"length":0,"stats":{"Line":0}},{"line":523,"address":[],"length":0,"stats":{"Line":0}},{"line":524,"address":[],"length":0,"stats":{"Line":0}},{"line":529,"address":[],"length":0,"stats":{"Line":0}},{"line":531,"address":[],"length":0,"stats":{"Line":0}},{"line":532,"address":[],"length":0,"stats":{"Line":0}},{"line":533,"address":[],"length":0,"stats":{"Line":0}},{"line":535,"address":[],"length":0,"stats":{"Line":0}},{"line":537,"address":[],"length":0,"stats":{"Line":0}},{"line":539,"address":[],"length":0,"stats":{"Line":0}},{"line":541,"address":[],"length":0,"stats":{"Line":0}},{"line":542,"address":[],"length":0,"stats":{"Line":0}},{"line":544,"address":[],"length":0,"stats":{"Line":0}},{"line":548,"address":[],"length":0,"stats":{"Line":0}},{"line":549,"address":[],"length":0,"stats":{"Line":0}},{"line":550,"address":[],"length":0,"stats":{"Line":0}},{"line":551,"address":[],"length":0,"stats":{"Line":0}},{"line":553,"address":[],"length":0,"stats":{"Line":0}},{"line":554,"address":[],"length":0,"stats":{"Line":0}},{"line":557,"address":[],"length":0,"stats":{"Line":0}},{"line":560,"address":[],"length":0,"stats":{"Line":0}},{"line":562,"address":[],"length":0,"stats":{"Line":0}},{"line":563,"address":[],"length":0,"stats":{"Line":0}},{"line":566,"address":[],"length":0,"stats":{"Line":0}},{"line":567,"address":[],"length":0,"stats":{"Line":0}},{"line":570,"address":[],"length":0,"stats":{"Line":0}},{"line":571,"address":[],"length":0,"stats":{"Line":0}},{"line":574,"address":[],"length":0,"stats":{"Line":0}},{"line":575,"address":[],"length":0,"stats":{"Line":0}},{"line":577,"address":[],"length":0,"stats":{"Line":0}},{"line":578,"address":[],"length":0,"stats":{"Line":0}},{"line":581,"address":[],"length":0,"stats":{"Line":0}},{"line":582,"address":[],"length":0,"stats":{"Line":0}},{"line":586,"address":[],"length":0,"stats":{"Line":0}},{"line":587,"address":[],"length":0,"stats":{"Line":0}},{"line":588,"address":[],"length":0,"stats":{"Line":0}},{"line":589,"address":[],"length":0,"stats":{"Line":0}},{"line":592,"address":[],"length":0,"stats":{"Line":0}},{"line":593,"address":[],"length":0,"stats":{"Line":0}},{"line":596,"address":[],"length":0,"stats":{"Line":0}},{"line":598,"address":[],"length":0,"stats":{"Line":0}},{"line":599,"address":[],"length":0,"stats":{"Line":0}},{"line":602,"address":[],"length":0,"stats":{"Line":0}},{"line":603,"address":[],"length":0,"stats":{"Line":0}},{"line":607,"address":[],"length":0,"stats":{"Line":0}},{"line":608,"address":[],"length":0,"stats":{"Line":0}},{"line":609,"address":[],"length":0,"stats":{"Line":0}},{"line":610,"address":[],"length":0,"stats":{"Line":0}},{"line":613,"address":[],"length":0,"stats":{"Line":0}},{"line":614,"address":[],"length":0,"stats":{"Line":0}},{"line":617,"address":[],"length":0,"stats":{"Line":0}},{"line":620,"address":[],"length":0,"stats":{"Line":0}},{"line":621,"address":[],"length":0,"stats":{"Line":0}},{"line":624,"address":[],"length":0,"stats":{"Line":0}},{"line":625,"address":[],"length":0,"stats":{"Line":0}},{"line":630,"address":[],"length":0,"stats":{"Line":0}},{"line":633,"address":[],"length":0,"stats":{"Line":0}},{"line":634,"address":[],"length":0,"stats":{"Line":0}},{"line":635,"address":[],"length":0,"stats":{"Line":0}},{"line":636,"address":[],"length":0,"stats":{"Line":0}},{"line":639,"address":[],"length":0,"stats":{"Line":0}},{"line":640,"address":[],"length":0,"stats":{"Line":0}},{"line":641,"address":[],"length":0,"stats":{"Line":0}},{"line":642,"address":[],"length":0,"stats":{"Line":0}},{"line":643,"address":[],"length":0,"stats":{"Line":0}},{"line":644,"address":[],"length":0,"stats":{"Line":0}},{"line":647,"address":[],"length":0,"stats":{"Line":0}},{"line":648,"address":[],"length":0,"stats":{"Line":0}},{"line":649,"address":[],"length":0,"stats":{"Line":0}},{"line":651,"address":[],"length":0,"stats":{"Line":0}},{"line":652,"address":[],"length":0,"stats":{"Line":0}},{"line":653,"address":[],"length":0,"stats":{"Line":0}},{"line":654,"address":[],"length":0,"stats":{"Line":0}},{"line":655,"address":[],"length":0,"stats":{"Line":0}},{"line":656,"address":[],"length":0,"stats":{"Line":0}},{"line":657,"address":[],"length":0,"stats":{"Line":0}},{"line":658,"address":[],"length":0,"stats":{"Line":0}},{"line":659,"address":[],"length":0,"stats":{"Line":0}},{"line":660,"address":[],"length":0,"stats":{"Line":0}},{"line":661,"address":[],"length":0,"stats":{"Line":0}},{"line":671,"address":[],"length":0,"stats":{"Line":0}},{"line":674,"address":[],"length":0,"stats":{"Line":0}},{"line":675,"address":[],"length":0,"stats":{"Line":0}},{"line":676,"address":[],"length":0,"stats":{"Line":0}},{"line":678,"address":[],"length":0,"stats":{"Line":0}},{"line":679,"address":[],"length":0,"stats":{"Line":0}},{"line":680,"address":[],"length":0,"stats":{"Line":0}},{"line":681,"address":[],"length":0,"stats":{"Line":0}},{"line":682,"address":[],"length":0,"stats":{"Line":0}},{"line":683,"address":[],"length":0,"stats":{"Line":0}},{"line":684,"address":[],"length":0,"stats":{"Line":0}},{"line":685,"address":[],"length":0,"stats":{"Line":0}},{"line":686,"address":[],"length":0,"stats":{"Line":0}},{"line":687,"address":[],"length":0,"stats":{"Line":0}},{"line":688,"address":[],"length":0,"stats":{"Line":0}},{"line":689,"address":[],"length":0,"stats":{"Line":0}},{"line":700,"address":[],"length":0,"stats":{"Line":0}},{"line":703,"address":[],"length":0,"stats":{"Line":0}},{"line":704,"address":[],"length":0,"stats":{"Line":0}},{"line":705,"address":[],"length":0,"stats":{"Line":0}},{"line":707,"address":[],"length":0,"stats":{"Line":0}},{"line":708,"address":[],"length":0,"stats":{"Line":0}},{"line":709,"address":[],"length":0,"stats":{"Line":0}},{"line":710,"address":[],"length":0,"stats":{"Line":0}},{"line":711,"address":[],"length":0,"stats":{"Line":0}},{"line":712,"address":[],"length":0,"stats":{"Line":0}},{"line":713,"address":[],"length":0,"stats":{"Line":0}},{"line":714,"address":[],"length":0,"stats":{"Line":0}},{"line":715,"address":[],"length":0,"stats":{"Line":0}},{"line":717,"address":[],"length":0,"stats":{"Line":0}},{"line":719,"address":[],"length":0,"stats":{"Line":0}},{"line":723,"address":[],"length":0,"stats":{"Line":0}},{"line":724,"address":[],"length":0,"stats":{"Line":0}},{"line":727,"address":[],"length":0,"stats":{"Line":0}},{"line":728,"address":[],"length":0,"stats":{"Line":0}},{"line":732,"address":[],"length":0,"stats":{"Line":0}},{"line":733,"address":[],"length":0,"stats":{"Line":0}},{"line":734,"address":[],"length":0,"stats":{"Line":0}},{"line":735,"address":[],"length":0,"stats":{"Line":0}},{"line":736,"address":[],"length":0,"stats":{"Line":0}},{"line":742,"address":[],"length":0,"stats":{"Line":0}},{"line":743,"address":[],"length":0,"stats":{"Line":0}},{"line":744,"address":[],"length":0,"stats":{"Line":0}},{"line":745,"address":[],"length":0,"stats":{"Line":0}},{"line":746,"address":[],"length":0,"stats":{"Line":0}},{"line":747,"address":[],"length":0,"stats":{"Line":0}},{"line":748,"address":[],"length":0,"stats":{"Line":0}},{"line":754,"address":[],"length":0,"stats":{"Line":0}},{"line":757,"address":[],"length":0,"stats":{"Line":0}},{"line":758,"address":[],"length":0,"stats":{"Line":0}},{"line":760,"address":[],"length":0,"stats":{"Line":0}},{"line":762,"address":[],"length":0,"stats":{"Line":0}},{"line":763,"address":[],"length":0,"stats":{"Line":0}},{"line":766,"address":[],"length":0,"stats":{"Line":0}},{"line":767,"address":[],"length":0,"stats":{"Line":0}},{"line":770,"address":[],"length":0,"stats":{"Line":0}},{"line":773,"address":[],"length":0,"stats":{"Line":0}},{"line":774,"address":[],"length":0,"stats":{"Line":0}},{"line":777,"address":[],"length":0,"stats":{"Line":0}},{"line":779,"address":[],"length":0,"stats":{"Line":0}},{"line":780,"address":[],"length":0,"stats":{"Line":0}},{"line":782,"address":[],"length":0,"stats":{"Line":0}},{"line":783,"address":[],"length":0,"stats":{"Line":0}},{"line":784,"address":[],"length":0,"stats":{"Line":0}},{"line":785,"address":[],"length":0,"stats":{"Line":0}},{"line":787,"address":[],"length":0,"stats":{"Line":0}},{"line":788,"address":[],"length":0,"stats":{"Line":0}},{"line":794,"address":[],"length":0,"stats":{"Line":0}},{"line":795,"address":[],"length":0,"stats":{"Line":0}},{"line":797,"address":[],"length":0,"stats":{"Line":0}},{"line":798,"address":[],"length":0,"stats":{"Line":0}},{"line":800,"address":[],"length":0,"stats":{"Line":0}},{"line":801,"address":[],"length":0,"stats":{"Line":0}},{"line":803,"address":[],"length":0,"stats":{"Line":0}},{"line":806,"address":[],"length":0,"stats":{"Line":0}},{"line":807,"address":[],"length":0,"stats":{"Line":0}},{"line":809,"address":[],"length":0,"stats":{"Line":0}},{"line":810,"address":[],"length":0,"stats":{"Line":0}},{"line":813,"address":[],"length":0,"stats":{"Line":0}},{"line":814,"address":[],"length":0,"stats":{"Line":0}},{"line":815,"address":[],"length":0,"stats":{"Line":0}},{"line":817,"address":[],"length":0,"stats":{"Line":0}},{"line":818,"address":[],"length":0,"stats":{"Line":0}},{"line":820,"address":[],"length":0,"stats":{"Line":0}},{"line":821,"address":[],"length":0,"stats":{"Line":0}},{"line":823,"address":[],"length":0,"stats":{"Line":0}},{"line":824,"address":[],"length":0,"stats":{"Line":0}},{"line":827,"address":[],"length":0,"stats":{"Line":0}},{"line":828,"address":[],"length":0,"stats":{"Line":0}},{"line":829,"address":[],"length":0,"stats":{"Line":0}},{"line":830,"address":[],"length":0,"stats":{"Line":0}},{"line":831,"address":[],"length":0,"stats":{"Line":0}},{"line":832,"address":[],"length":0,"stats":{"Line":0}},{"line":834,"address":[],"length":0,"stats":{"Line":0}},{"line":837,"address":[],"length":0,"stats":{"Line":0}},{"line":838,"address":[],"length":0,"stats":{"Line":0}},{"line":840,"address":[],"length":0,"stats":{"Line":0}},{"line":841,"address":[],"length":0,"stats":{"Line":0}},{"line":844,"address":[],"length":0,"stats":{"Line":0}},{"line":845,"address":[],"length":0,"stats":{"Line":0}},{"line":847,"address":[],"length":0,"stats":{"Line":0}},{"line":848,"address":[],"length":0,"stats":{"Line":0}},{"line":851,"address":[],"length":0,"stats":{"Line":0}},{"line":853,"address":[],"length":0,"stats":{"Line":0}},{"line":854,"address":[],"length":0,"stats":{"Line":0}},{"line":857,"address":[],"length":0,"stats":{"Line":0}},{"line":860,"address":[],"length":0,"stats":{"Line":0}},{"line":861,"address":[],"length":0,"stats":{"Line":0}},{"line":862,"address":[],"length":0,"stats":{"Line":0}},{"line":865,"address":[],"length":0,"stats":{"Line":0}},{"line":866,"address":[],"length":0,"stats":{"Line":0}},{"line":869,"address":[],"length":0,"stats":{"Line":0}},{"line":870,"address":[],"length":0,"stats":{"Line":0}},{"line":871,"address":[],"length":0,"stats":{"Line":0}},{"line":873,"address":[],"length":0,"stats":{"Line":0}},{"line":876,"address":[],"length":0,"stats":{"Line":0}},{"line":877,"address":[],"length":0,"stats":{"Line":0}},{"line":878,"address":[],"length":0,"stats":{"Line":0}},{"line":879,"address":[],"length":0,"stats":{"Line":0}},{"line":881,"address":[],"length":0,"stats":{"Line":0}},{"line":883,"address":[],"length":0,"stats":{"Line":0}},{"line":884,"address":[],"length":0,"stats":{"Line":0}},{"line":885,"address":[],"length":0,"stats":{"Line":0}},{"line":887,"address":[],"length":0,"stats":{"Line":0}},{"line":890,"address":[],"length":0,"stats":{"Line":0}},{"line":893,"address":[],"length":0,"stats":{"Line":0}},{"line":894,"address":[],"length":0,"stats":{"Line":0}},{"line":895,"address":[],"length":0,"stats":{"Line":0}},{"line":897,"address":[],"length":0,"stats":{"Line":0}},{"line":898,"address":[],"length":0,"stats":{"Line":0}},{"line":899,"address":[],"length":0,"stats":{"Line":0}},{"line":900,"address":[],"length":0,"stats":{"Line":0}},{"line":901,"address":[],"length":0,"stats":{"Line":0}},{"line":902,"address":[],"length":0,"stats":{"Line":0}},{"line":903,"address":[],"length":0,"stats":{"Line":0}},{"line":905,"address":[],"length":0,"stats":{"Line":0}},{"line":906,"address":[],"length":0,"stats":{"Line":0}},{"line":907,"address":[],"length":0,"stats":{"Line":0}},{"line":909,"address":[],"length":0,"stats":{"Line":0}},{"line":910,"address":[],"length":0,"stats":{"Line":0}},{"line":911,"address":[],"length":0,"stats":{"Line":0}},{"line":912,"address":[],"length":0,"stats":{"Line":0}},{"line":913,"address":[],"length":0,"stats":{"Line":0}},{"line":916,"address":[],"length":0,"stats":{"Line":0}},{"line":917,"address":[],"length":0,"stats":{"Line":0}},{"line":919,"address":[],"length":0,"stats":{"Line":0}},{"line":920,"address":[],"length":0,"stats":{"Line":0}},{"line":922,"address":[],"length":0,"stats":{"Line":0}},{"line":923,"address":[],"length":0,"stats":{"Line":0}},{"line":924,"address":[],"length":0,"stats":{"Line":0}},{"line":925,"address":[],"length":0,"stats":{"Line":0}},{"line":926,"address":[],"length":0,"stats":{"Line":0}},{"line":930,"address":[],"length":0,"stats":{"Line":0}},{"line":931,"address":[],"length":0,"stats":{"Line":0}},{"line":932,"address":[],"length":0,"stats":{"Line":0}},{"line":933,"address":[],"length":0,"stats":{"Line":0}},{"line":934,"address":[],"length":0,"stats":{"Line":0}},{"line":935,"address":[],"length":0,"stats":{"Line":0}},{"line":936,"address":[],"length":0,"stats":{"Line":0}},{"line":939,"address":[],"length":0,"stats":{"Line":0}},{"line":940,"address":[],"length":0,"stats":{"Line":0}},{"line":943,"address":[],"length":0,"stats":{"Line":0}},{"line":944,"address":[],"length":0,"stats":{"Line":0}},{"line":945,"address":[],"length":0,"stats":{"Line":0}},{"line":947,"address":[],"length":0,"stats":{"Line":0}},{"line":948,"address":[],"length":0,"stats":{"Line":0}},{"line":949,"address":[],"length":0,"stats":{"Line":0}},{"line":951,"address":[],"length":0,"stats":{"Line":0}},{"line":952,"address":[],"length":0,"stats":{"Line":0}},{"line":953,"address":[],"length":0,"stats":{"Line":0}},{"line":956,"address":[],"length":0,"stats":{"Line":0}},{"line":957,"address":[],"length":0,"stats":{"Line":0}},{"line":958,"address":[],"length":0,"stats":{"Line":0}},{"line":960,"address":[],"length":0,"stats":{"Line":0}},{"line":962,"address":[],"length":0,"stats":{"Line":0}},{"line":963,"address":[],"length":0,"stats":{"Line":0}},{"line":966,"address":[],"length":0,"stats":{"Line":0}},{"line":967,"address":[],"length":0,"stats":{"Line":0}},{"line":969,"address":[],"length":0,"stats":{"Line":0}},{"line":970,"address":[],"length":0,"stats":{"Line":0}},{"line":971,"address":[],"length":0,"stats":{"Line":0}},{"line":972,"address":[],"length":0,"stats":{"Line":0}},{"line":974,"address":[],"length":0,"stats":{"Line":0}},{"line":979,"address":[],"length":0,"stats":{"Line":0}},{"line":982,"address":[],"length":0,"stats":{"Line":0}},{"line":983,"address":[],"length":0,"stats":{"Line":0}},{"line":984,"address":[],"length":0,"stats":{"Line":0}},{"line":985,"address":[],"length":0,"stats":{"Line":0}},{"line":987,"address":[],"length":0,"stats":{"Line":0}},{"line":988,"address":[],"length":0,"stats":{"Line":0}},{"line":990,"address":[],"length":0,"stats":{"Line":0}},{"line":994,"address":[],"length":0,"stats":{"Line":0}},{"line":997,"address":[],"length":0,"stats":{"Line":0}},{"line":998,"address":[],"length":0,"stats":{"Line":0}},{"line":1000,"address":[],"length":0,"stats":{"Line":0}},{"line":1002,"address":[],"length":0,"stats":{"Line":0}},{"line":1003,"address":[],"length":0,"stats":{"Line":0}},{"line":1004,"address":[],"length":0,"stats":{"Line":0}},{"line":1006,"address":[],"length":0,"stats":{"Line":0}},{"line":1007,"address":[],"length":0,"stats":{"Line":0}},{"line":1009,"address":[],"length":0,"stats":{"Line":0}},{"line":1013,"address":[],"length":0,"stats":{"Line":0}},{"line":1015,"address":[],"length":0,"stats":{"Line":0}},{"line":1016,"address":[],"length":0,"stats":{"Line":0}},{"line":1017,"address":[],"length":0,"stats":{"Line":0}},{"line":1018,"address":[],"length":0,"stats":{"Line":0}},{"line":1019,"address":[],"length":0,"stats":{"Line":0}},{"line":1021,"address":[],"length":0,"stats":{"Line":0}},{"line":1027,"address":[],"length":0,"stats":{"Line":0}},{"line":1028,"address":[],"length":0,"stats":{"Line":0}},{"line":1029,"address":[],"length":0,"stats":{"Line":0}},{"line":1030,"address":[],"length":0,"stats":{"Line":0}},{"line":1031,"address":[],"length":0,"stats":{"Line":0}},{"line":1032,"address":[],"length":0,"stats":{"Line":0}},{"line":1034,"address":[],"length":0,"stats":{"Line":0}},{"line":1039,"address":[],"length":0,"stats":{"Line":0}},{"line":1040,"address":[],"length":0,"stats":{"Line":0}},{"line":1045,"address":[],"length":0,"stats":{"Line":0}},{"line":1046,"address":[],"length":0,"stats":{"Line":0}},{"line":1047,"address":[],"length":0,"stats":{"Line":0}},{"line":1048,"address":[],"length":0,"stats":{"Line":0}},{"line":1049,"address":[],"length":0,"stats":{"Line":0}},{"line":1050,"address":[],"length":0,"stats":{"Line":0}},{"line":1052,"address":[],"length":0,"stats":{"Line":0}},{"line":1057,"address":[],"length":0,"stats":{"Line":0}},{"line":1058,"address":[],"length":0,"stats":{"Line":0}},{"line":1059,"address":[],"length":0,"stats":{"Line":0}},{"line":1063,"address":[],"length":0,"stats":{"Line":0}},{"line":1064,"address":[],"length":0,"stats":{"Line":0}},{"line":1065,"address":[],"length":0,"stats":{"Line":0}},{"line":1066,"address":[],"length":0,"stats":{"Line":0}},{"line":1067,"address":[],"length":0,"stats":{"Line":0}},{"line":1069,"address":[],"length":0,"stats":{"Line":0}},{"line":1074,"address":[],"length":0,"stats":{"Line":0}},{"line":1075,"address":[],"length":0,"stats":{"Line":0}},{"line":1076,"address":[],"length":0,"stats":{"Line":0}},{"line":1077,"address":[],"length":0,"stats":{"Line":0}},{"line":1078,"address":[],"length":0,"stats":{"Line":0}},{"line":1080,"address":[],"length":0,"stats":{"Line":0}},{"line":1085,"address":[],"length":0,"stats":{"Line":0}},{"line":1086,"address":[],"length":0,"stats":{"Line":0}},{"line":1087,"address":[],"length":0,"stats":{"Line":0}},{"line":1089,"address":[],"length":0,"stats":{"Line":0}},{"line":1094,"address":[],"length":0,"stats":{"Line":0}},{"line":1095,"address":[],"length":0,"stats":{"Line":0}},{"line":1096,"address":[],"length":0,"stats":{"Line":0}},{"line":1097,"address":[],"length":0,"stats":{"Line":0}},{"line":1098,"address":[],"length":0,"stats":{"Line":0}},{"line":1100,"address":[],"length":0,"stats":{"Line":0}},{"line":1104,"address":[],"length":0,"stats":{"Line":0}},{"line":1107,"address":[],"length":0,"stats":{"Line":0}},{"line":1108,"address":[],"length":0,"stats":{"Line":0}},{"line":1111,"address":[],"length":0,"stats":{"Line":0}},{"line":1112,"address":[],"length":0,"stats":{"Line":0}},{"line":1113,"address":[],"length":0,"stats":{"Line":0}},{"line":1116,"address":[],"length":0,"stats":{"Line":0}},{"line":1119,"address":[],"length":0,"stats":{"Line":0}},{"line":1120,"address":[],"length":0,"stats":{"Line":0}},{"line":1121,"address":[],"length":0,"stats":{"Line":0}},{"line":1123,"address":[],"length":0,"stats":{"Line":0}},{"line":1127,"address":[],"length":0,"stats":{"Line":0}},{"line":1129,"address":[],"length":0,"stats":{"Line":0}},{"line":1130,"address":[],"length":0,"stats":{"Line":0}},{"line":1132,"address":[],"length":0,"stats":{"Line":0}},{"line":1133,"address":[],"length":0,"stats":{"Line":0}},{"line":1134,"address":[],"length":0,"stats":{"Line":0}},{"line":1135,"address":[],"length":0,"stats":{"Line":0}},{"line":1136,"address":[],"length":0,"stats":{"Line":0}},{"line":1138,"address":[],"length":0,"stats":{"Line":0}},{"line":1139,"address":[],"length":0,"stats":{"Line":0}},{"line":1142,"address":[],"length":0,"stats":{"Line":0}},{"line":1143,"address":[],"length":0,"stats":{"Line":0}},{"line":1144,"address":[],"length":0,"stats":{"Line":0}},{"line":1145,"address":[],"length":0,"stats":{"Line":0}},{"line":1146,"address":[],"length":0,"stats":{"Line":0}},{"line":1150,"address":[],"length":0,"stats":{"Line":0}},{"line":1151,"address":[],"length":0,"stats":{"Line":0}},{"line":1153,"address":[],"length":0,"stats":{"Line":0}},{"line":1155,"address":[],"length":0,"stats":{"Line":0}},{"line":1158,"address":[],"length":0,"stats":{"Line":0}},{"line":1159,"address":[],"length":0,"stats":{"Line":0}},{"line":1160,"address":[],"length":0,"stats":{"Line":0}},{"line":1161,"address":[],"length":0,"stats":{"Line":0}},{"line":1162,"address":[],"length":0,"stats":{"Line":0}},{"line":1163,"address":[],"length":0,"stats":{"Line":0}},{"line":1164,"address":[],"length":0,"stats":{"Line":0}},{"line":1167,"address":[],"length":0,"stats":{"Line":0}},{"line":1168,"address":[],"length":0,"stats":{"Line":0}},{"line":1169,"address":[],"length":0,"stats":{"Line":0}},{"line":1172,"address":[],"length":0,"stats":{"Line":0}},{"line":1173,"address":[],"length":0,"stats":{"Line":0}},{"line":1175,"address":[],"length":0,"stats":{"Line":0}},{"line":1176,"address":[],"length":0,"stats":{"Line":0}},{"line":1177,"address":[],"length":0,"stats":{"Line":0}},{"line":1178,"address":[],"length":0,"stats":{"Line":0}},{"line":1179,"address":[],"length":0,"stats":{"Line":0}},{"line":1180,"address":[],"length":0,"stats":{"Line":0}},{"line":1181,"address":[],"length":0,"stats":{"Line":0}},{"line":1184,"address":[],"length":0,"stats":{"Line":0}},{"line":1185,"address":[],"length":0,"stats":{"Line":0}},{"line":1186,"address":[],"length":0,"stats":{"Line":0}},{"line":1187,"address":[],"length":0,"stats":{"Line":0}},{"line":1190,"address":[],"length":0,"stats":{"Line":0}},{"line":1193,"address":[],"length":0,"stats":{"Line":0}},{"line":1194,"address":[],"length":0,"stats":{"Line":0}},{"line":1196,"address":[],"length":0,"stats":{"Line":0}},{"line":1197,"address":[],"length":0,"stats":{"Line":0}},{"line":1198,"address":[],"length":0,"stats":{"Line":0}},{"line":1199,"address":[],"length":0,"stats":{"Line":0}},{"line":1201,"address":[],"length":0,"stats":{"Line":0}},{"line":1202,"address":[],"length":0,"stats":{"Line":0}},{"line":1205,"address":[],"length":0,"stats":{"Line":0}},{"line":1206,"address":[],"length":0,"stats":{"Line":0}},{"line":1208,"address":[],"length":0,"stats":{"Line":0}},{"line":1209,"address":[],"length":0,"stats":{"Line":0}},{"line":1211,"address":[],"length":0,"stats":{"Line":0}},{"line":1212,"address":[],"length":0,"stats":{"Line":0}},{"line":1214,"address":[],"length":0,"stats":{"Line":0}},{"line":1215,"address":[],"length":0,"stats":{"Line":0}},{"line":1217,"address":[],"length":0,"stats":{"Line":0}},{"line":1218,"address":[],"length":0,"stats":{"Line":0}},{"line":1219,"address":[],"length":0,"stats":{"Line":0}},{"line":1220,"address":[],"length":0,"stats":{"Line":0}},{"line":1222,"address":[],"length":0,"stats":{"Line":0}},{"line":1223,"address":[],"length":0,"stats":{"Line":0}},{"line":1224,"address":[],"length":0,"stats":{"Line":0}},{"line":1226,"address":[],"length":0,"stats":{"Line":0}},{"line":1227,"address":[],"length":0,"stats":{"Line":0}},{"line":1229,"address":[],"length":0,"stats":{"Line":0}},{"line":1231,"address":[],"length":0,"stats":{"Line":0}},{"line":1232,"address":[],"length":0,"stats":{"Line":0}},{"line":1233,"address":[],"length":0,"stats":{"Line":0}}],"covered":0,"coverable":728}],"coverage":4.57516339869281,"covered":35,"coverable":765}